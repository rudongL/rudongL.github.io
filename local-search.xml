<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot RESTFul 服务</title>
    <link href="/2021/12/03/RESTful/"/>
    <url>/2021/12/03/RESTful/</url>
    
    <content type="html"><![CDATA[<h1 id="编译-RestFul-Web-服务"><a href="#编译-RestFul-Web-服务" class="headerlink" title="编译 RestFul Web 服务"></a>编译 RestFul Web 服务</h1><h2 id="你会得到什么效果"><a href="#你会得到什么效果" class="headerlink" title="你会得到什么效果"></a>你会得到什么效果</h2><p>这个教程使你掌握 Spring 创建 “Hello world” RESTFul web 服务。</p><p>你将会编译一个 HTTP GET 请求的 URL ，这个 URL 的链接为 <code>http://localhost:8080/greeting</code>，作为响应它将会返回一个 JSON 表现层：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;id&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;Hello,World!&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>在查询字符串中也可以使用自定义 <code>name</code> 参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">http://localhost:8080/greeting?name=User<br></code></pre></td></tr></table></figure><p><code>name</code> 参数的值覆盖了默认值 <code>World</code>，并且在响应中反应出来：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;id&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;Hello,User!&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="需要什么"><a href="#需要什么" class="headerlink" title="需要什么"></a>需要什么</h2><ul><li>大约 15 分钟</li><li>喜欢的文本编辑器或 IDE(集成开发环境)</li><li>JDK 1.8 或更高</li><li>Gradle 4+ 或 Maven 3.2+</li><li>也可以直接导入代码到 IDE</li></ul><h2 id="如何完成这个教程"><a href="#如何完成这个教程" class="headerlink" title="如何完成这个教程"></a>如何完成这个教程</h2><p>和很多 Spring 教程一样，你可以从头开始完成每一步或者跳过已经熟悉的步骤。</p><ul><li><p>使用 Git 克隆项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/spring-guides/gs-rest-service.git<br></code></pre></td></tr></table></figure></li><li><p>进入 <code>gs-rest-service/initial</code> 目录</p></li></ul><h2 id="使用-Spring-初始化工具"><a href="#使用-Spring-初始化工具" class="headerlink" title="使用 Spring 初始化工具"></a>使用 Spring 初始化工具</h2><ol><li>导航到 <a href="https://start.spring.io/">Spring Initializr</a>，这个网站帮你拉取你需要的所有依赖。</li><li>选择编译工具：Gradle 或 Maven。</li><li>点击 <strong>依赖</strong> 选择 <strong>Spring Web</strong>。</li><li>点击生成。</li><li>下载压缩文件。</li></ol><h2 id="创建一个资源展示类"><a href="#创建一个资源展示类" class="headerlink" title="创建一个资源展示类"></a>创建一个资源展示类</h2><p>现在你已经搭建了项目以及编译系统，可以创建 web 服务。</p><p>这个服务会处理 <code>/greeting</code> 方式的 <code>GET</code> 请求，<code>name</code> 参数是可选的。<code>GET</code> 请求会返回带有 <code>200 ok</code> 的 JSON 体，类似于这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;content&quot;</span>: <span class="hljs-string">&quot;Hello, World!&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>id</code> 属性是 greet 的独特的描述符，<code>content</code> 是 greeting 的文本展示部分。</p><p>创建一个带有 <code>id</code> 和 <code>content</code> 属性、构造器、访问器的 POJO。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Greeting</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> id;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String content;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Greeting</span><span class="hljs-params">(<span class="hljs-keyword">long</span> id, String content)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br><span class="hljs-keyword">this</span>.content = content;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getContent</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> content;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><em>这个应用使用 Jackson JSON 库自动将 Greeting 对象转化为 JSON 对象。Jackson 被 Web 启动器自动加载。</em></p><hr><h2 id="创建控制层-Controller"><a href="#创建控制层-Controller" class="headerlink" title="创建控制层 Controller"></a>创建控制层 Controller</h2><p>HTTP 请求被 Controller 处理。这些组件被 <code>@RestController</code> 注解修饰，下面的 <code>GreetingController</code> 处理 <code>/greeting</code> 的 <code>GET</code> 请求并返回一个 <code>Greeting</code> 类的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicLong;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GreetingController</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String template = <span class="hljs-string">&quot;Hello, %s!&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AtomicLong counter = <span class="hljs-keyword">new</span> AtomicLong();<br><br><span class="hljs-meta">@GetMapping(&quot;/greeting&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Greeting <span class="hljs-title">greeting</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;name&quot;, defaultValue = &quot;World&quot;)</span> String name)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Greeting(counter.incrementAndGet(), String.format(template, name));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@GetMapping</code> 确保 <code>/greeting</code> 的 <code>HTTP GET</code> 请求匹配到 <code>greeting()</code> 方法。</p><p>其他 HTTP 动词也有相应的注释(例如 <code>POST</code> 的 <code>@PostMapping</code>)。还有一个 <code>@RequestMapping</code> 注释，它们都来自这个注释，可以作为同义词使用(例如<code>@RequestMapping(method=GET)</code>)。</p><p><code>@RequestParam</code> 将 URL 请求参数 <code>name</code> 和方法参数 <code>name</code> 绑定，如果请求参数没有，则使用默认值 <code>World</code> 。</p><p>方法主体的实现根据来自计数器的下一个值创建并返回一个新的 <code>Greeting</code> 对象，该对象具有 <code>id</code> 和<code>content</code> 属性，并使用 <code>Greeting</code> 模板格式化给定的名称。</p><p>传统的 MVC 控制层和 RESTFul 风格不同的一个关键点是 HTTP 响应体创建的方式。不是依赖将响应数据渲染成 HTML 的视图技术，RESTFul web 服务直接返回一个 <code>Greeting</code> 对象。数据直接写到 JSON 对象中。</p><p>上面的代码使用 <code>@RestController</code> 注解，标志着类中每一个对象返回对象而不是视图。它包括 <code>@Controller</code> 和 <code>@ResponseBody</code> 两个注解。</p><p><code>Greeting</code> 对象必须转化为 JSON 格式。多亏 Spring HTTP 消息转换支持，不需要手动转换。因为 <a href="https://github.com/FasterXML/jackson">jackson2</a> 在路径中，<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.html">MappingJackson2HttpMessageConverter</a> 方法可以自动将 <code>Greeting</code> 实例转化为 JSON 对象。</p><p><code>@SpringBootApplication</code> 注解包括下面全部注解：</p><ul><li><code>@Configuration</code>：应用程序上下文中标记一个类是 bean 定义的源。</li><li><code>@EnableAutoConfiguration</code>: 告诉 SpringBoot 添加基于 classpath 设置的 bean，其他的 beans 和不同的配置设置。例如：如果 <code>spring-webmvc</code> 在路径中，这个注解标志这个项目是 Web 项目则激活关键的习惯，如搭建 <code>DispatcherServelet</code>。</li><li><code>@ComponentScan</code>: 告诉 Spring 寻找其他的组件配置和服务。</li></ul><p><code>main()</code> 方法使用 SpringBoot 的 <code>SpringApplication.run()</code> 方法发布应用。这个 Web 服务是 100% 纯 Java 代码不需要 XML 配置。</p><h2 id="编译可执行-JAR-包"><a href="#编译可执行-JAR-包" class="headerlink" title="编译可执行 JAR 包"></a>编译可执行 JAR 包</h2><p>运行 <code>./mvnw spring-boot:run</code> 或者 <code>./mvnw spring-boot:run</code>，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar target/gs-rest-service-0.1.0.jar<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动项目，访问：<a href="http://localhost:8080/greeting?name=User">http://localhost:8080/greeting?name=User</a></p><p>会得到：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;id&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;Hello,World!&quot;</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>RESTFul, SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot 定时任务</title>
    <link href="/2021/11/19/SpringBoot%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/2021/11/19/SpringBoot%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-定时任务"><a href="#SpringBoot-定时任务" class="headerlink" title="SpringBoot 定时任务"></a>SpringBoot 定时任务</h1><p>SpringBoot 定时任务十分简单。只需几步就能搞定。下面总结一下方便以后使用。（其实官方 how to 就有，这里总结一下练习自己的总结能力以及方便以后查阅）</p><h2 id="1、搭建-SpringBoot-项目"><a href="#1、搭建-SpringBoot-项目" class="headerlink" title="1、搭建 SpringBoot 项目"></a>1、搭建 SpringBoot 项目</h2><p>（From Scratch，白手起家，加深对 SpringBoot 的理解）</p><h3 id="1-1、添加-SpringBoot-依赖"><a href="#1-1、添加-SpringBoot-依赖" class="headerlink" title="1.1、添加 SpringBoot 依赖"></a>1.1、添加 SpringBoot 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--SpringBoot 父依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-comment">&lt;!--SpringBoot Starter--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--网页相关--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--定时任务--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.awaitility<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>awaitility<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--测试--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Maven 插件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2、添加主启动类"><a href="#1-2、添加主启动类" class="headerlink" title="1.2、添加主启动类"></a>1.2、添加主启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringBootApplicationDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(SpringBootApplicationDemo.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、添加定时任务类"><a href="#2、添加定时任务类" class="headerlink" title="2、添加定时任务类"></a>2、添加定时任务类</h2><p>此定时任务每隔 5s 再控制台打印当前时间。</p><p>@Scheduled() 注解的 fixRate 字段指定间隔时间，默认单位 ms。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduledTask</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger log =LoggerFactory.getLogger(ScheduledTask.class);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> SimpleDateFormat DATE_FORMAT = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>);<br>    <span class="hljs-meta">@Scheduled(fixedRate = 5000)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reportCurrentTime</span><span class="hljs-params">()</span></span>&#123;<br>        log.info(<span class="hljs-string">&quot;The time is now &#123;&#125;&quot;</span>,DATE_FORMAT.format(<span class="hljs-keyword">new</span> Date()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、主启动类开启定时任务注解即可"><a href="#3、主启动类开启定时任务注解即可" class="headerlink" title="3、主启动类开启定时任务注解即可"></a>3、主启动类开启定时任务注解即可</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-comment">//开启定时任务注解</span><br><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringBootApplicationDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(SpringBootApplicationDemo.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA 快捷键</title>
    <link href="/2021/09/16/IDEA/"/>
    <url>/2021/09/16/IDEA/</url>
    
    <content type="html"><![CDATA[<ul><li>快捷键<ul><li>编辑<ul><li>重写方法 —— <code>ctrl + O</code></li><li>自动修复 —— <code>alt + enter</code></li><li>格式化代码 ——  <code>ctrl + alt + L</code></li><li>扩大文本选中范围 —— <code>ctrl + w</code></li><li>缩小选中范围 —— <code>ctrl + shift + w</code></li><li>复制当前行 —— <code>ctrl + d</code></li><li>删除选中行 —— <code>ctrl + y</code></li><li>移动当前行 —— <code>alt + shift + ↑|↓</code></li><li>移动代码块 —— <code>ctrl + alt + ↑|↓</code></li><li>整体左移 —— <code>Shift + Tab</code></li><li>整体右移 —— <code>Tab</code></li><li>展开|折叠方法 <ul><li>当前方法 —— <code>ctrl + + | -</code></li><li>所有方法 —— <code>ctrl + shift + + | -</code></li></ul></li><li>插入模板代码 —— <code>ctrl + alt + t </code></li><li>撤销上次操作 —— <code>ctrl + shift + delete</code></li><li>标签操作<ul><li>选中当前标签 —— <code>ctrl + j</code></li><li>选中同类标签 —— <code>ctrl + shift + j</code></li><li>取消选中标签 —— <code>alt + shift + j</code></li></ul></li><li>全局替换 —— <code>ctrl + shift + r</code></li><li>前进|后退 —— <code>ctrl + alt + ←|→</code></li><li>禅模式 —— <code>Alt+Z</code></li></ul></li><li>提示 &amp; 补全<ul><li>查看全部提示 —— <code>ctrl + space</code> 两次</li><li>自动补全（; for if等） —— <code>ctrl + shift + enter</code></li><li>查看所有匹配建议  —— <code>ctrl + shift + space</code></li><li>自动补全<ul><li>.</li><li>tab</li></ul></li><li>查看补全建议 —— <code>ctrl + space</code></li><li>参数提示 —— <code>ctrl + p</code></li><li>查看文档 —— <code>ctrl + q</code></li><li>方法定义 —— <code>ctrl + shift + i</code></li><li>高亮所有变量 —— <code>ctrl + shift + F7</code></li></ul></li><li>重构<ul><li>批量重命名 —— <code>shift + F6</code></li><li>抽取变量 —— <code>ctrl + alt + v</code> </li><li>抽取方法 —— <code>ctrl + alt + m</code></li><li>查看重构列表 —— <code>ctrl + alt + shift + t</code> </li></ul></li><li>格式化代码<ul><li>格式化代码 —— <code>ctrl + alt + L</code></li><li>设置格式化的位置 —— <code>ctrl + shift + alt + L</code></li><li>代码缩进 —— <code>ctrl + alt + I</code></li></ul></li><li>搜索<ul><li>搜索所有 —— 双击 shift</li><li>搜索类 —— <code>ctrl + n</code></li><li>在指定文件夹搜索类 —— <code>ctrl + shift + n</code> </li><li>全局变量或方法 —— <code>ctrl + shift + alt + n</code> </li><li>切换搜索位置 —— <code>alt + p</code> </li><li>查找所有指定字符串 —— <code>ctrl + shift + f</code> 严格匹配 —— <code>alt + w</code> </li><li>在文件中查找，f3 下一个 shift f3 上一个 —— <code>ctrl + F</code></li></ul></li><li>文件结构<ul><li>打开项目结构 —— <code>ctrl + f12</code> </li><li>另一种方式 —— <code>alt + 7</code> </li><li>跳到方法声明处，再次查看所有使用；查看方法实现 —— <code>ctrl + B</code> </li><li><code>alt + f7</code> 方法使用细节，包括声明和使用，右键 pin tab（锁定标签），<code>shift + esc</code> 隐藏视图 <code>alt + 3</code> 重新查看使用</li><li>父方法 —— <code>ctrl + u</code> </li><li>接口实现树 —— <code>ctrl + shift+ h</code> </li><li>类继承图 —— <code>ctrl + h</code> </li><li>切换最近文件 —— <code>ctrl + e</code> </li><li>最近访问文件的代码 —— <code>ctrl + shift + e</code> </li></ul></li><li>运行和调试<ul><li>运行项目 —— <code>ctrl + shift + f10</code> </li><li>打断点 —— <code>ctrl + f8</code> </li><li>调试方式运行 —— <code>shift + f9</code> </li><li>进入方法 —— <code>f7</code></li><li>跳出方法 —— <code>shift + f8</code></li><li>执行方法下一行 —— <code>F8</code></li><li>下一个断点 —— <code>F9</code></li><li>定位到下一个错误位置 —— <code>f2</code> </li><li>查看异常信息 —— <code>ctrl + f1</code> </li><li>[[IDEA01]]</li></ul></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis</title>
    <link href="/2021/09/15/Mybatis/"/>
    <url>/2021/09/15/Mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><p><a href="https://mybatis.org/mybatis-3/">MyBatis 官网</a></p><h2 id="MyBatis-Hello-World"><a href="#MyBatis-Hello-World" class="headerlink" title="MyBatis Hello World"></a>MyBatis Hello World</h2><h3 id="0-搭建环境"><a href="#0-搭建环境" class="headerlink" title="0. 搭建环境"></a>0. 搭建环境</h3><p>IDEA 使用 Maven 方式创建 Spring Boot 项目，添加 MyBatis 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--pom.xml--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-comment">&lt;!--SpringBoot 相关--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--MyBatis 依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--MySQL 驱动类--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="引入-Flyway-插件"><a href="#引入-Flyway-插件" class="headerlink" title="引入 Flyway 插件"></a>引入 Flyway 插件</h6><p>通过 Flyway 记录数据库变化</p><p><a href="https://flywaydb.org/">flyway 官网</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.flywaydb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flyway-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>jdbc:mysql://localhost:3306?serverTimezone=GMT<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">schemas</span>&gt;</span><br><span class="hljs-comment">&lt;!--存放历史信息--&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">schema</span>&gt;</span>public<span class="hljs-tag">&lt;/<span class="hljs-name">schema</span>&gt;</span><br>                  <span class="hljs-tag">&lt;/<span class="hljs-name">schemas</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>properties 文件路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">resources<br>|------application.properties<br></code></pre></td></tr></table></figure><p>Flyway 配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 值不能加引号，否则加注释时 target 目录不能自动解析导致 target 目录下 db.properties 带括号</span><br><span class="hljs-comment">#application.properties</span><br><span class="hljs-meta">spring.flyway.user</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.flyway.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-meta">spring.flyway.baseline-on-migrate</span>=<span class="hljs-string">true</span><br><span class="hljs-meta">spring.flyway.schemas</span>=<span class="hljs-string">public</span><br></code></pre></td></tr></table></figure><p>数据库配置文件 db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># db.properties</span><br><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306?serverTimezone=GMT</span><br><span class="hljs-attr">user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><p>Flyway 文件路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">resources<br>|---db<br>  |---migration<br>|---V1__Create_table_person.sql;<br></code></pre></td></tr></table></figure><p>resources 下新建 SQL 文件： <code>db/migration/V1__Creat_table_person.sql</code>；（<strong>目录</strong>，不是包）。</p><p>修复 flyway:<code>mvn flyway:repair</code>，合并脚本: <code>mvn flyway:migrate</code> 配置 Schema<br>配置 mysql url <code>jdbc:mysql://localhost:3306?serverTimezone=GMT</code></p><h2 id="1-新建表、POJO-类，xXXMapper-xml"><a href="#1-新建表、POJO-类，xXXMapper-xml" class="headerlink" title="1. 新建表、POJO 类，xXXMapper.xml"></a>1. 新建表、POJO 类，xXXMapper.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--xxxMapper.xml--&gt;</span><br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--该映射文件唯一标识符--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.rdleng.entity.personMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--id为接口方法名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryPersonById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.rdleng.entity.Person&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Integer&quot;</span>&gt;</span><br>        select * from public.person where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-配置-MyBatis-xml-文件"><a href="#2-配置-MyBatis-xml-文件" class="headerlink" title="2.配置 MyBatis.xml 文件"></a>2.配置 MyBatis.xml 文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis.xml--&gt;</span><br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--加载数据库配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--事务管理--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--配置数据源--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--加载映射文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;personMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rdleng.test;<br><br><span class="hljs-keyword">import</span> com.rdleng.entity.Person;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Reader;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rdleng</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@mail</span> rdleng@foxmail.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-09-09 19:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMybatis</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">/*加载 Mybatis 配置文件*/</span><br>        Reader reader = Resources.getResourceAsReader(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br>        SqlSessionFactory factory = (SqlSessionFactory) <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(reader);<br>        SqlSession session = factory.openSession();<br>        <span class="hljs-comment">//namespace+id,sql参数值</span><br>        String statement = <span class="hljs-string">&quot;com.rdleng.entity.personMapper.queryPersonById&quot;</span>;<br>        Person person = session.selectOne(statement,<span class="hljs-number">1</span>);<br>        System.out.println(person);<br>        session.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MyBatis 约定 &gt; 配置 &gt; 硬编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建接口，接口名与 xxxMapper.xml 一致，方法名与 id 一致，参数类型，返回值类型一致</span><br><span class="hljs-keyword">package</span> com.rdleng.mapper;<br><br><span class="hljs-keyword">import</span> com.rdleng.entity.Student;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rdleng</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@mail</span> rdleng@foxmail.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-09-10 9:47</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentMapper</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 学生 id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 根据 id 查询学生</span><br><span class="hljs-comment">     * 1.方法名与 mapper.xml 中 id 一致</span><br><span class="hljs-comment">     * 2.参数类型与 sql 输入参数类型一致</span><br><span class="hljs-comment">     * 3.返回值与 mapper.xml 中 resultType 一致</span><br><span class="hljs-comment">     * 4.接口名与 mapper.xml 中 namespace 一致</span><br><span class="hljs-comment">     * 5.根据方法名找到 mapper.xml 中对应的 sql 标签</span><br><span class="hljs-comment">     * 6.mapper.xml 和接口通常放在同一个包中</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-function">Student <span class="hljs-title">queryStudentById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>SpringBoot 集成 MyBatis 找不到 xml 文件的解决方法：pom.xml 文件添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rdleng.test;<br><br><span class="hljs-keyword">import</span> com.rdleng.entity.Student;<br><span class="hljs-keyword">import</span> com.rdleng.mapper.StudentMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Reader;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *测试 MyBatis 约定优于配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rdleng</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@mail</span> rdleng@foxmail.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-09-10 10:01</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMybatis</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Reader reader = Resources.getResourceAsReader(<span class="hljs-string">&quot;conf.xml&quot;</span>);<br>        SqlSessionFactory factory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(reader);<br>        SqlSession session = factory.openSession();<br>        StudentMapper mapper = session.getMapper(StudentMapper.class);<br>        Student student = mapper.queryStudentById(<span class="hljs-number">1</span>);<br>        System.out.println(student);<br>        session.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>StudentMapper mapper = session.getMapper(StudentMapper.class);重点</code></p><p>优化</p><ol><li><p>可以将配置信息单独放入 <code>db.properties</code> 文件中，然后动态引入 db.properties。k=v，引入后，使用 ${key} 取值。</p></li><li><p>config.xml 中 <code>&lt;properties/&gt;</code> 下，<code>&lt;enviroments/&gt;</code> 上添加 <code>&lt;settings&gt;&lt;setting name=&quot;&quot; value=&quot;&quot;/&gt;&lt;/settings&gt;</code> 设置全局参数。</p></li><li><p>别名：全局参数中配置，不区分大小写。</p></li></ol><ul><li><p>设置单个别名 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--单独配置别名，忽略大小写--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.rdleng.entity.Student&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;student&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>批量设置别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--批量配置别名，忽略大小写；包括包和子包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.rdleng.entity&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="类型转换器"><a href="#类型转换器" class="headerlink" title="类型转换器"></a>类型转换器</h5></li></ul><ol><li><p>自定义类型转换器<br>用于 Java 中属性和数据库字段不一致的情况，例如：Java 代码 (boolean true:男，false:女) &lt;-&gt; DB (int 1:男，2：女)</p><ul><li>实现<code>TypeHandler</code>接口</li><li>继承<code>BaseTypeHandler&lt;java类型&gt;</code>抽象类</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rdleng.converter;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.JdbcType;<br><span class="hljs-keyword">import</span> java.sql.CallableStatement;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> rdleng</span><br><span class="hljs-comment">* <span class="hljs-doctag">@mail</span> rdleng@foxmail.com</span><br><span class="hljs-comment">* <span class="hljs-doctag">@create</span> 2020-09-11 12:30</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">java代码(boolean true:男，false:女) &lt;-&gt; DB(int 1:男，2：女)</span><br><span class="hljs-comment">泛型为java类型</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BooleanAndIntConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseTypeHandler</span>&lt;<span class="hljs-title">Boolean</span>&gt;</span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNonNullParameter</span><span class="hljs-params">(PreparedStatement preparedStatement, <span class="hljs-keyword">int</span> i, Boolean aBoolean, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>   <span class="hljs-keyword">if</span> (aBoolean)&#123;<br>   preparedStatement.setInt(i,<span class="hljs-number">1</span>);<br>   &#125;<span class="hljs-keyword">else</span>&#123;<br>   preparedStatement.setInt(i,<span class="hljs-number">0</span>);<br>   &#125;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">getNullableResult</span><span class="hljs-params">(ResultSet resultSet, String s)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>   <span class="hljs-keyword">int</span> sexNum = resultSet.getInt(s);<br>   <span class="hljs-keyword">return</span> sexNum == <span class="hljs-number">1</span>;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">getNullableResult</span><span class="hljs-params">(ResultSet resultSet, <span class="hljs-keyword">int</span> i)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>   <span class="hljs-keyword">int</span> sexInt = resultSet.getInt(i);<br>   <span class="hljs-keyword">return</span> sexInt == <span class="hljs-number">1</span>;<br>   &#125;<br><br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">getNullableResult</span><span class="hljs-params">(CallableStatement callableStatement, <span class="hljs-keyword">int</span> i)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>   <span class="hljs-keyword">int</span> sexNum = callableStatement.getInt(i);<br>   <span class="hljs-keyword">return</span> sexNum == <span class="hljs-number">1</span>;<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>配置config.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">typeHandlers</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;com.rdleng.converter.BooleanAndIntConverter&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;boolean&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;int&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">typeHandlers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>修改<code>studentMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--若java代码与sql数据类型一致，则使用resultType；若不一致则使用resultMap--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryStudentByIdWithTypeConverter&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentResult&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        select *<br>        from people.student<br>        where stuId = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--分为主键和非主键--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stuId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuNum&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stuNum&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stuName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuClass&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stuClass&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phoneNum&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phoneNum&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuSex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stuSex&quot;</span>  <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Boolean&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--对象类型一对一用association,一对多用collection--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;homeAddress&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;homeAddress&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;schoolAddress&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;schoolAddress&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="输入参数：parameterType"><a href="#输入参数：parameterType" class="headerlink" title="输入参数：parameterType"></a>输入参数：parameterType</h2><p>1.类型为 简单类型（8个基本类型+String）<br>#{}、${}的区别</p><ul><li><p>#{任意值}<br>${value} ，其中的标识符只能是value</p></li><li><p>#{}自动给String类型加上’’  （自动类型转换）<br>${} 原样输出，但是适合于 动态排序（动态字段）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> stuno,stuname,stuage  <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> stuname <span class="hljs-operator">=</span> #&#123;<span class="hljs-keyword">value</span>&#125;<br><span class="hljs-keyword">select</span> stuno,stuname,stuage  <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> stuname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$&#123;value&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>动态排序：<br><code>select stuno,stuname,stuage  from student  order by $&#123;value&#125; asc</code></p></li><li><p>#{}可以防止SQL注入；${}不防止</p></li></ul><p>${}、#{}相同之处：<br>a.都可以 获取对象的值 （嵌套类型对象）</p><p>i.获取对象值：<br>模糊查询，方式一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> stuno,stuname,stuage  <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> stuage<span class="hljs-operator">=</span> #&#123;stuAge&#125;  <span class="hljs-keyword">or</span> stuname <span class="hljs-keyword">like</span> #&#123;stuName&#125; <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Student student = <span class="hljs-keyword">new</span> Student();<br>student.setStuAge(<span class="hljs-number">24</span>);<br>student.setStuName(<span class="hljs-string">&quot;%w%&quot;</span>);<br>List&lt;Student&gt; students = studentMapper.queryStudentBystuageOrstuName(student) ;<span class="hljs-comment">//接口的方法-&gt;SQL</span><br></code></pre></td></tr></table></figure><p>模糊查询，方式二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> stuno,stuname,stuage  <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> stuage<span class="hljs-operator">=</span> #&#123;stuAge&#125;  <span class="hljs-keyword">or</span> stuname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%$&#123;stuName&#125;%&#x27;</span><br></code></pre></td></tr></table></figure><p>ii.嵌套类型对象</p><p>2.对象类型<br>#{属性名}<br>${属性名}</p><p>输入对象为HashMap:<br>where stuage= # {stuAge}<br>用map中key的值匹配占位符# {stuAge}， 如果匹配成功就用map的value替换占位符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;queryStudentByAgeOrNameWithHashMap&quot; resultType<span class="hljs-operator">=</span>&quot;student&quot; parameterType<span class="hljs-operator">=</span>&quot;HashMap&quot;<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> people.student <span class="hljs-keyword">where</span> stuAge <span class="hljs-operator">=</span> #&#123;stuAge&#125; <span class="hljs-keyword">or</span> stuName <span class="hljs-keyword">like</span>  <span class="hljs-string">&#x27;%$&#123;stuName&#125;%&#x27;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;String, Object&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>hashMap.put(<span class="hljs-string">&quot;&#x27;stuAge&quot;</span>,<span class="hljs-number">21</span>);<br>hashMap.put(<span class="hljs-string">&quot;stuName&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>);<br>System.out.println(mapper.queryStudentByAgeOrNameWithHashMap(hashMap));<br></code></pre></td></tr></table></figure><p>Mybatis调用存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">procedure</span> queryCountByGradeWithProcedure (gName <span class="hljs-keyword">in</span> <span class="hljs-type">varchar</span>, scount <span class="hljs-keyword">out</span> number )<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">into</span> scount <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> graname <span class="hljs-operator">=</span> gname ;<br><span class="hljs-keyword">end</span>; <span class="hljs-operator">/</span><br></code></pre></td></tr></table></figure><p>设置mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--通过调用存储过程，实现查询，statementType=&quot;CALLABLE&quot;</span><br><span class="hljs-comment">输入参数在Mybatis中通常用HashMap&lt;String,Object&gt;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryCountByGradeWithProcedure&quot;</span> <span class="hljs-attr">statementType</span>=<span class="hljs-string">&quot;CALLABLE&quot;</span>  <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;HashMap&quot;</span>&gt;</span><br>call people.queryCountByGradeWithProcedure(<br>    #&#123;stuClass,jdbcType=INTEGER,mode=IN&#125;,<br>    #&#123;sCount,jdbcType=INTEGER,mode=OUT&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    根据存储过程查询某个年级的学生总数</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">queryCountByGradeWithProcedure</span><span class="hljs-params">(Map&lt;String, Object&gt; params)</span></span>;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在使用时，通过hashmap的put方法传入输入参数的值;通过hashmap的Get方法获取输出参数的值</span><br>HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;stuClass&quot;</span>,<span class="hljs-number">2</span>);<br>mapper.queryCountByGradeWithProcedure(map);<br>Object count = map.get(<span class="hljs-string">&quot;sCount&quot;</span>);<br>System.out.println(count);<br></code></pre></td></tr></table></figure><h5 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h5><h6 id="where、if"><a href="#where、if" class="headerlink" title="where、if"></a>where、if</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-operator">!</span><span class="hljs-comment">--方式一：使用&lt;where&gt;标签，但是此标签只会自动处理第一个&lt;if&gt;标签中的and--&gt;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;queryStudentByStuNameAndStuNumWithSQLTag&quot; parameterType<span class="hljs-operator">=</span>&quot;student&quot; resultType<span class="hljs-operator">=</span>&quot;hashmap&quot;<span class="hljs-operator">&gt;</span><br>        <span class="hljs-keyword">select</span> stuNum num,stuName name <span class="hljs-keyword">from</span> people.student<br>        <span class="hljs-operator">&lt;</span><span class="hljs-keyword">where</span><span class="hljs-operator">&gt;</span><br>            <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;stuName!=null and stuName!=&#x27;&#x27; &quot;<span class="hljs-operator">&gt;</span><br>                <span class="hljs-keyword">and</span> stuName<span class="hljs-operator">=</span>#&#123;stuName&#125;<br>            <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br>            <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;stuNum != null and stuNum!=&#x27;&#x27; &quot;<span class="hljs-operator">&gt;</span><br>                <span class="hljs-keyword">and</span> stuNum <span class="hljs-operator">=</span> #&#123;stuNum&#125;<br>            <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br>        <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">where</span><span class="hljs-operator">&gt;</span><br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">!</span><span class="hljs-comment">--方式二：使用where 1 = 1,所有if标签都加and --&gt;</span><br>    <span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;queryStudentByStuNameAndStuNumWithSQLTag&quot; parameterType<span class="hljs-operator">=</span>&quot;student&quot; resultType<span class="hljs-operator">=</span>&quot;hashmap&quot;<span class="hljs-operator">&gt;</span><br>        <span class="hljs-keyword">select</span> stuNum num,stuName name <span class="hljs-keyword">from</span> people.student <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>            <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;stuName!=null and stuName!=&#x27;&#x27; &quot;<span class="hljs-operator">&gt;</span><br>                <span class="hljs-keyword">and</span> stuName<span class="hljs-operator">=</span>#&#123;stuName&#125;<br>            <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br>            <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;stuNum != null and stuNum!=&#x27;&#x27; &quot;<span class="hljs-operator">&gt;</span><br>                <span class="hljs-keyword">and</span> stuNum <span class="hljs-operator">=</span> #&#123;stuNum&#125;<br>            <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h6 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h6><p>迭代的类型：数组、对象数组、集合、属性（Grade类：List<Integer> ids）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-operator">!</span><span class="hljs-comment">--将多个元素放入对象的属性--&gt;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;queryStudentByStuIdInGrade&quot; parameterType<span class="hljs-operator">=</span>&quot;grade&quot; resultType<span class="hljs-operator">=</span>&quot;student&quot;<span class="hljs-operator">&gt;</span><br>        <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> people.student <span class="hljs-keyword">where</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br>        <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;stuId!=null and stuId.size &gt; 0&quot;<span class="hljs-operator">&gt;</span><br>            <span class="hljs-operator">&lt;</span>foreach collection<span class="hljs-operator">=</span>&quot;stuId&quot; item<span class="hljs-operator">=</span>&quot;stuId&quot; <span class="hljs-keyword">open</span><span class="hljs-operator">=</span>&quot; and stuId in (&quot; <span class="hljs-keyword">close</span><span class="hljs-operator">=</span>&quot;)&quot; separator<span class="hljs-operator">=</span>&quot;,&quot;<span class="hljs-operator">&gt;</span><br>                #&#123;stuId&#125;<br>            <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>foreach<span class="hljs-operator">&gt;</span><br>        <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">!</span><span class="hljs-comment">--简单类型的数组：无论在编写代码时，传递的时什么参数名（stuId）,在mapper.xml文件中，必须用array代替该数组；集合：无论在编写代码时，传递的时什么参数名（stuId）,在mapper.xml文件中，必须用list代替该集合；对象类型数组必须为parameterType=&quot;Object[]&quot;，item=&quot;student&quot;--&gt;</span><br></code></pre></td></tr></table></figure><h6 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--trim既可以处理第一个and又可以处理最后一个and;</span><br><span class="hljs-comment">处理第一个and时， prefix=&quot;where&quot;表示给sql语句添加where;</span><br><span class="hljs-comment">prefixOverrides=&quot;and&quot;表示处理第一个and;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;and&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;stuName != nul1 and stuName!=&#x27;&#x27;&quot;</span>&gt;</span><br>and stuName like &#x27;%$&#123;stuName&#125;$%&#x27; <br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;graName != null and graName !=&#x27;&#x27;&quot;</span>&gt;</span> <br>and qraName like &#x27;%$&#123;graName&#125;$%&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;stuAge != null and stuAge!= &#x27;&#x27;&quot;</span>&gt;</span><br>and stuAge = # &#123;stuAge&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br><span class="hljs-comment">&lt;!--处理最后一个and时，suffixOverrides=&quot;and&quot;表示处理最后一个&quot;and&quot;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;and&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;stuName != nul1 and stuName!=&#x27;&#x27;&quot;</span>&gt;</span><br> stuName like &#x27;%$&#123;stuName&#125;$%&#x27; and<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;graName != null and graName !=&#x27;&#x27;&quot;</span>&gt;</span> <br> qraName like &#x27;%$&#123;graName&#125;$%&#x27; and<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;stuAge != null and stuAge!= &#x27;&#x27;&quot;</span>&gt;</span><br> stuAge = # &#123;stuAge&#125; and<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></td></tr></table></figure><p>输出参数resultType<br>1.简单类型（8个基本+String）<br>2.输出参数为实体对象类型<br>3.输出参数为实体对象类型的集合 ：虽然输出类型为集合，但是resultType依然写 集合的元素类型（resyltType=”Student”）<br>4.输出参数类型为HashMap<br>    –HashMap本身是一个集合，可以存放多个元素，<br>      但是根据提示发现  返回值为HashMap时  ，查询的结果只能是1个学生（no,name）；<br>–&gt;结论：一个HashMap 对应一个学生的多个元素（多个属性）  【一个map，一个学生】</p><p>二维数组<br>{<br>    {1,zs,23,xa},    -一个HashMap对象<br>    {2,ls,24,bj},<br>    {3,ww,25,tj}<br>}</p><p>resultType<br>resultMap:实体类的属性、数据表的字段： 类型、名字不同时（stuno,id）<br>注意：当属性名 和字段名 不一致时，除了使用resultMap以外，还可以使用resultType+HashMap:</p><p>a.resultMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;resultMap type=<span class="hljs-string">&quot;student&quot;</span> id=<span class="hljs-string">&quot;queryStudentByIdMap&quot;</span>&gt;<br>&lt;!-- 指定类中的属性 和 表中的字段 对应关系 --&gt;<br>&lt;id property=<span class="hljs-string">&quot;stuNo&quot;</span>  column=<span class="hljs-string">&quot;id&quot;</span> /&gt;<br>&lt;result property=<span class="hljs-string">&quot;stuName&quot;</span> column=<span class="hljs-string">&quot;name&quot;</span> /&gt;<br>&lt;/resultMap&gt;<br></code></pre></td></tr></table></figure><p>​<br>b.resultType+HashMap<br>select  表的字段名 “类的属性名” from… 来制定字段名 和属性名的对应关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryStudentByIdWithHashMap&quot;</span>  <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span><span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;student&quot;</span> &gt;</span><br>select id &quot;stuNo&quot;,name &quot;stuName&quot; from student where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意:  如果如果10个字段，但发现 某一个字段结果始终为默认值（0，0.0，null），则可能是 表的字段  和 类的属性名字写错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询全部</span><br>String statement = <span class="hljs-string">&quot;select stuno,stuname from student&quot;</span>;<br><span class="hljs-comment">//根据年龄查询学生</span><br>String statement = <span class="hljs-string">&quot;select stuno,stuname from student where stuage = #&#123;stuage&#125;&quot;</span>; <br><span class="hljs-comment">//根据姓名和年龄查询学生</span><br>String statement = <span class="hljs-string">&quot;select stuno,stuname from student where stuage = #&#123;stuage&#125; and stuage = #&#123;stuage&#125; &quot;</span>; <br></code></pre></td></tr></table></figure><p>select stuno,stuname from student where  stuname = #{stuName}and  stuage = #{stuAge}</p><p>select stuno,stuname,stuage from student <where> and stuname = #{stuName}  and  stuage = #{stuAge}</p><p><where>会自动处理第一个<if>标签中的 and，但不会处理之后<if>中的and</p><p><code>&lt;foreach&gt;</code><br>查询学号为1、2、53的学生信息</p><p><code>ids = &#123;1,2,53&#125;;</code></p><p><code>select stuno,stuname from student  where stuno in(1,2,53) </code></p><p><code>&lt;foreach&gt;</code>迭代的类型：数组、对象数组、集合、属性(Grade类： <code>List&lt;Integer&gt; ids</code>)</p><p>属性(Grade类： <code>List&lt;Integer&gt; ids</code>)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <br><span class="hljs-keyword">open</span>:<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">and</span>  stuno <span class="hljs-keyword">in</span> (<br>item:<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">and</span>  stuno <span class="hljs-keyword">in</span> (<span class="hljs-number">1253</span><br><span class="hljs-keyword">close</span>:<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">and</span>  stuno <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">53</span>)<br></code></pre></td></tr></table></figure><p>简单类型的数组:<br>无论编写代码时，传递的是什么参数名(stuNos)，在mapper.xml中 必须用array代替该数组</p><p>集合：<br>无论编写代码时，传递的是什么参数名(stuNos)，在mapper.xml中 必须用list代替该数组</p><p>对象数组：<br>Student[] students = {student0,student1,student2}  每个studentx包含一个学号属性<br>注意的几点：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">parameterType<span class="hljs-operator">=</span>&quot;Object[]&quot; <br> <span class="hljs-operator">&lt;</span>foreach collection<span class="hljs-operator">=</span>&quot;array&quot; <span class="hljs-keyword">open</span><span class="hljs-operator">=</span>&quot; and  stuno in (&quot; <span class="hljs-keyword">close</span><span class="hljs-operator">=</span>&quot;)&quot; <br>   item<span class="hljs-operator">=</span>&quot;student&quot; separator<span class="hljs-operator">=</span>&quot;,&quot;<span class="hljs-operator">&gt;</span>   <br>   #&#123;student.stuNo&#125;<br>  <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>foreach<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>SQL片段：<br>    java：方法<br>    数据库：存储过程、存储函数<br>    Mybatis :SQL片段 </p><p>a.提取相似代码<br>b.引用</p><p>关联查询：<br>一对一:<br>a.业务扩展类<br>        核心：用resultType指定类的属性 包含 多表查询的所有字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rdleng.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rdleng</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@mail</span> rdleng@foxmail.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-09-23 8:55</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentBusiness</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> cardId;<br>    <span class="hljs-keyword">private</span> String stuDesc;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCardId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cardId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCardId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cardId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cardId = cardId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getStuDesc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> stuDesc;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStuDesc</span><span class="hljs-params">(String stuDesc)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.stuDesc = stuDesc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.toString()+<span class="hljs-string">&quot;StudentBuiness&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;cardId=&quot;</span> + cardId +<br>                <span class="hljs-string">&quot;, stuDesc=&#x27;&quot;</span> + stuDesc + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryStudentByStuIdWithOO&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;StudentBusiness&quot;</span>&gt;</span><br>        select people.student.*, people.stucard.*<br>        from people.student<br>                 inner join people.stucard on student.cardId = stucard.cardId<br>        where people.student.stuId = #&#123;stuId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">queryStudentByStuIdWithOO</span><span class="hljs-params">(<span class="hljs-keyword">int</span> stuId)</span></span>;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(mapper.queryStudentByStuIdWithOO(<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p>b.resultMap</p><p>一对多</p><p>（MyBatis:多对一，多对多的本质就是  一对多的变化）</p><p>pojo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rdleng.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rdleng</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@mail</span> rdleng@foxmail.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-09-23 11:13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassBusiness</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> classId;<br>    <span class="hljs-keyword">private</span> String className;<br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; students;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">getStudents</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> students;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStudents</span><span class="hljs-params">(List&lt;Student&gt; students)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.students = students;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ClassBusiness&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;classId=&quot;</span> + classId +<br>                <span class="hljs-string">&quot;, className=&#x27;&quot;</span> + className + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, students=&quot;</span> + students +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryClassAndStudentByClassIdOM&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;class_to_student&quot;</span>&gt;</span><br>        select c.*,s.*<br>        from people.student s<br>                 inner join people.class c on s.classId = c.classId<br>        where s.classId = #&#123;classId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;class_to_student&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;classBusiness&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;classId&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;classId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;className&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;className&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--属性中的元素类型用ofType--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;student&quot;</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stuNum&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuNum&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stuAge&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuAge&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stuName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuName&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stuClass&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuClass&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stuSex&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuSex&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p> interface</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">ClassBusiness <span class="hljs-title">queryClassAndStudentByClassIdOM</span><span class="hljs-params">(<span class="hljs-keyword">int</span> classId)</span></span>;<br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ClassBusiness classBusiness = mapper.queryClassAndStudentByClassIdOM(<span class="hljs-number">2</span>);<br>List&lt;Student&gt; students = classBusiness.getStudents();<br><span class="hljs-keyword">for</span> (Student student : students) &#123;            System.out.println(student.getStuNum()+<span class="hljs-string">&quot;,&quot;</span>+student.getStuName()+<span class="hljs-string">&quot;,&quot;</span>+student.getStuAge());<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="日志：Log4j"><a href="#日志：Log4j" class="headerlink" title="日志：Log4j"></a>日志：Log4j</h5><p>a.Log4j:    log4j.jar (mybatis.zip中lib中包含此jar)或使用maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>b.开启日志，conf.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开启日志，并指定使用的具体日志 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LOG4J&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果不指定，Mybatis就会根据以下顺序 寻找日志<br>SLF4J →Apache Commons Logging →Log4j 2 → Log4j →JDK logging</p><p>c.编写配置日志输出文件<br>log4j.properties，内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">DEBUG, stdout</span><br><span class="hljs-meta">log4j.appender.stdout</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.stdout.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="hljs-string">%5p [%t] - %m%n</span><br></code></pre></td></tr></table></figure><p>日志级别：<br>    DEBUG&lt;INFO&lt;WARN&lt;ERROR<br>如果设置为info，则只显示 info及以上级别的信息；<br>建议：在开发时设置debug，在运行时设置为info或以上。</p><p>可以通过日志信息，相信的阅读mybatis执行情况（ 观察mybatis实际执行sql语句 以及SQL中的参数 和返回结果）</p><h5 id="延迟加载（懒加载）："><a href="#延迟加载（懒加载）：" class="headerlink" title="延迟加载（懒加载）："></a>延迟加载（懒加载）：</h5><p>一对一、一对多、多对一、多对多<br>一对多：班级-学生 ，<br>如果不采用延迟加载  （立即加载），查询时会将 一 和多 都查询，班级、班级中的所有学生。<br>如果想要  暂时只查询1的一方，  而多的一方 先不查询 而是在需要的时候再去查询 –&gt;延迟加载</p><p>一对一：学生、学生证</p><p>mybatis中使用延迟加载，需要先配置：</p><p>如果增加了mapper.xml ,要修改conf.xml配置文件（将新增的mapper.xml加载进去）</p><p>通过debug可以发现， 如果程序只需要学生，则只向数据库发送了查询学生的SQL；<br>当我们后续 需要用到学生证的时候，再第二次发送 查询学生证的SQL。</p><p>一对多：和一对一的延迟加载配置方法相同</p><p>延迟加载的步骤：先查班级，按需查询学生<br>1.开启延迟加载conf.xml配置settings</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开启延迟加载 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 关闭立即加载 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aggressiveLazyLoading&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.加载映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/rdleng/mapper/StudentCardMapper.xml&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>3.配置mapper.xml<br>    写2个Mapper:</p><p>StudentCardMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--该映射文件的唯一标识符--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.rdleng.mapper.StudentCardMapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryCardByCardId&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;StudentCard&quot;</span>&gt;</span><br>    select * from people.stucard where cardId = #&#123;cardId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>StudentMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--select=&quot;com.rdleng.mapper.StudentCardMapper.queryCardByCardId&quot; column=&quot;cardId&quot;&gt;选择对应的sql语句，根据外键cardId传参数；首先查询学生，延迟查询学生证--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryStudentByStuIdWithLazyLoadOO&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;student_card_lazy_load_map&quot;</span>  &gt;</span><br>        select *<br>        from people.student<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student_card_lazy_load_map&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stuId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuNum&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stuNum&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stuName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuAge&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stuAge&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuCard&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;StudentCard&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.rdleng.mapper.StudentCardMapper.queryCardByCardId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cardId&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cardId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cardId&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuDesc&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stuDesc&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.配置接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">queryStudentByStuIdWithLazyLoadOO</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">StudentCard <span class="hljs-title">queryCardByCardId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cardId)</span></span>;<br></code></pre></td></tr></table></figure><p>5.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Student&gt; students1 =  mapper.queryStudentByStuIdWithLazyLoadOO();<br><span class="hljs-keyword">for</span> (Student student : students1) &#123;<br>System.out.println(student.getStuNum() + <span class="hljs-string">&quot;,&quot;</span> + student.getStuName());<br>StudentCard card = student.getStuCard();<br>System.out.println(card.getCardId() + <span class="hljs-string">&quot;,&quot;</span> + card.getStuDesc());<br>        &#125;<br></code></pre></td></tr></table></figure><p>一对多延迟加载示例：</p><p>POJO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rdleng.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rdleng</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@mail</span> rdleng@foxmail.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-09-23 15:13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clazz</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> classId;<br>    <span class="hljs-keyword">private</span> String className;<br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; students;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">getStudents</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> students;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStudents</span><span class="hljs-params">(List&lt;Student&gt; students)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.students = students;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Clazz&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;classId=&quot;</span> + classId +<br>                <span class="hljs-string">&quot;, className=&#x27;&quot;</span> + className + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, students=&quot;</span> + students +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getClassId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> classId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setClassId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> classId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.classId = classId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getClassName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> className;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setClassName</span><span class="hljs-params">(String className)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.className = className;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>StudentClassMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--该映射文件的唯一标识符--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.rdleng.mapper.StudentClassMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryStudentByClassId&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        select * from people.student where stuClass  = #&#123;classId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>conf.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/rdleng/mapper/StudentClassMapper.xml&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>StudentMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    一对多延迟加载--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryClassAndStudentByClassIdOMWithLazyLoad&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;class_to_student_lazy_load&quot;</span>&gt;</span><br>        select c.*<br>        from people.class c<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;class_to_student_lazy_load&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Clazz&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;classId&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;classId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;className&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;className&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.rdleng.mapper.StudentClassMapper.queryStudentByClassId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;classId&quot;</span> &gt;</span><br>          <span class="hljs-comment">&lt;!--  &lt;result column=&quot;stuNum&quot; property=&quot;stuNum&quot;/&gt;</span><br><span class="hljs-comment">            &lt;result column=&quot;stuAge&quot; property=&quot;stuAge&quot;/&gt;</span><br><span class="hljs-comment">            &lt;result column=&quot;stuName&quot; property=&quot;stuName&quot;/&gt;</span><br><span class="hljs-comment">            &lt;result column=&quot;stuClass&quot; property=&quot;stuClass&quot;/&gt;</span><br><span class="hljs-comment">            &lt;result column=&quot;stuSex&quot; property=&quot;stuSex&quot;/&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">List&lt;Clazz&gt; <span class="hljs-title">queryClassAndStudentByClassIdOMWithLazyLoad</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Clazz&gt; clazzes = mapper.queryClassAndStudentByClassIdOMWithLazyLoad();<br><span class="hljs-keyword">for</span> (Clazz clazz : clazzes) &#123;<br>System.out.println(clazz.getClassId() + <span class="hljs-string">&quot;,&quot;</span>+clazz.getClassName());<br>System.out.println(<span class="hljs-string">&quot;---------&quot;</span>);<br>List&lt;Student&gt; students2 = clazz.getStudents();<br><span class="hljs-keyword">for</span> (Student student : students2) &#123;<br>System.out.println(student.getStuNum() + <span class="hljs-string">&quot;,&quot;</span> + student.getStuName());<br>            &#125;<br></code></pre></td></tr></table></figure><p>1.查询缓存<br>    一级缓存 ：同一个SqlSession对象<br>      MyBatis默认开启一级缓存，如果用同样的SqlSession对象查询相同的数据，<br>    则只会在第一次 查询时 向数据库发送SQL语句，并将查询的结果 放入到SQLSESSION中（作为缓存在）；<br>    后续再次查询该同样的对象时，<br>    则直接从缓存中查询该对象即可（即省略了数据库的访问）</p><p><img src="https://raw.githubusercontent.com/rdleng/typora-image/master/img/20200923155550.png" alt="image-20200923155544411"></p><p>二级缓存<br>MyBatis默认情况没有开启二级缓存，需要手工打开。<br>a.conf.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 开启二级缓存 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>b.在具体的mapper.xml中声明开启(studentMapper.xml中)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.lanqiao.mapper.StudentMapper&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 声明次namespace开启二级缓存 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>根据异常提示：NotSerializableException可知，MyBatis的二级缓存 是将对象 放入硬盘文件中<br>            序列化：内存-&gt;硬盘<br>            反序列化：硬盘-&gt;内存<br>    准备缓存的对象，必须实现了序列化接口 （如果开启的缓存Namespace=”org.lanqiao.mapper.StudentMapper”），可知序列化对象为Student，因此需要将Student序列化 （序列化Student类，以及Student的级联属性、和父类）</p><p>​    触发将对象写入二级缓存的时机：SqlSession对象的close()方法。</p><p>​    Mybatis自带二级缓存：【同一个namespace】生成的mapper对象</p><p>回顾：namespace的值 就是 接口的全类名（包名.类名）， 通过接口可以产生代理对象（studentMapper对象）</p><p>–&gt;namespace决定了studentMapper对象的产生<br>结论：只要产生的xxxMapper对象 来自于同一个namespace，则 这些对象 共享二级缓存。<br>注意：二级缓存 的范围是同一个namespace, 如果有多个xxMapper.xml的namespace值相同，则通过这些xxxMapper.xml产生的xxMapper对象 仍然共享二级缓存。</p><p>禁用 ：select标签中useCache=”false”</p><p>清理：</p><p>a.与清理一级缓存的方法相同<br>    commit(); （一般执行增删改时 会清理掉缓存；设计的原因 是为了防止脏数据）<br>    在二级缓存中，commit()不能是查询自身的commit。</p><p>commit会清理一级和二级缓存；但是 清理二级缓存时，不能是查询自身的commit；<br>b. 在select标签中 增加属性 flushCache=”true”</p><p>命中率：<br>1:  zs :0%<br>2:    50%<br>3:   2/3    0.666<br>4:  3/4     0.75</p><p>三方提供的二级缓存：<br>ehcache、memcache<br>要想整合三方提供的二级缓存 （或者自定义二级缓存），必须实现org.apache.ibatis.cache.Cache接口，该接口的默认实现类是PerpetualCache</p><p>整合ehcache二级缓存：<br>a.<br>ehcache-core.jar<br>mybatis-Ehcache.jar<br>slf4j-api.jar</p><p>b.编写ehcache配置文件 Ehcache.xml</p><p>c.开启EhCache二级缓存</p><p>在xxxMapper.xml中开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 通过property覆盖Ehcache.xml中的值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxElementsInMemory&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2000&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxElementsOnDisk&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3000&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">cache</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.逆向工程<br>    表、类、接口、mapper.xml四者密切相关，因此 当知道一个的时候  其他三个应该可以自动生成。<br>    表-&gt;其他三个</p><pre><code>实现步骤：a.  mybatis-generator-core.jar、mybatis.jar、ojdbc.jarb.  逆向工程的配置文件generator.xmlc.  执行</code></pre><h5 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h5><h6 id="1-数据库环境切换-驱动-jar"><a href="#1-数据库环境切换-驱动-jar" class="headerlink" title="1.数据库环境切换 (驱动 jar)"></a>1.数据库环境切换 (驱动 jar)</h6><p>a.切换 environment ( 指定实际使用数据库)<br>b.配置 Provider 别名<br>c.写不同数据库 SQL 语句<br>d.在mappe. xml中配置databaseId=’ Provider别名”<br>如果mapper. xml的 sq1标签仅有一个不带databaseId的标签， 则<br>改标签会自动适应当前数据库。<br>如果既有不带databaseId的标签，又有带databaseId的标签,则程<br>序会优先使用带databaseId的标签</p><h6 id="2-注解方式"><a href="#2-注解方式" class="headerlink" title="2.注解方式"></a>2.注解方式</h6><p>推荐使用xml_<br>a.将sq1语句写在接口的方法上@Select(“”) ;<br>b.将接口的全类名写入<mapper>，让mybati s知道sq1语句<br>此时是存储在接口中<br>注解/ xml都支持批量引入，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-comment">&lt;!--以下可以将com.rdleng.mapper包中的注解接口和xml全部一次性引入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.rdleng.mapper’/ &gt;</span></span><br><span class="hljs-string"><span class="hljs-tag">&lt;/mappers&gt;</span></span><br></code></pre></td></tr></table></figure><h6 id="3-增删改的返回值问题"><a href="#3-增删改的返回值问题" class="headerlink" title="3.增删改的返回值问题"></a>3.增删改的返回值问题</h6><p>返回值可以是void、Integer、Long、Boolean；在接口中直接修改，不用修改xml文件的resultType<br>如何操作：只需要在接口中修改返回值即可。</p><ol start="4"><li><h6 id="事务自动提交"><a href="#事务自动提交" class="headerlink" title="事务自动提交"></a>事务自动提交</h6></li></ol><p>手动提交:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">sessionFactory.openSession();<br>session.commit();<br></code></pre></td></tr></table></figure><p>自动提交：<br>   每个dml语句 自动提交<br>   <code>sessionFactory.openSession(true);</code></p><h6 id="5-自增问题"><a href="#5-自增问题" class="headerlink" title="5.自增问题"></a>5.自增问题</h6><p>MySQL支持自增(回显)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--只需要配置两个属性即可: useGeneratedKeys=&quot;true”keyProperty=&quot;stuNo&quot;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addStudent&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.rdleng.entity.Student”</span></span><br><span class="hljs-string"><span class="hljs-tag">useGeneratedKeys=&quot;</span><span class="hljs-attr">true</span>&quot;<span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;stuNo&quot;</span> &gt;</span><br>insert into student (stuName,stuAge,graName) values(#&#123;stuName&#125;,#&#123;stuAge&#125;,#&#123;graName&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Oracal不支持自增：通过序列模拟实现</p><p><code>create sequence myseql increment by 1 start with 1;</code><br>序列的两个属性：<br>nextval：序列中下一个值<br>currval：当前值<br><code>insert into student values (myseq.nextval,...);</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--首先执行create sequence myseql increment by 1 start with 1;--&gt;</span><br><span class="hljs-comment">&lt;!--增加一个学生oracal--&gt;</span><br><span class="hljs-comment">&lt;!--方式一：推荐--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot; addStudent&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.yanqun.entity.Student&quot;</span> <span class="hljs-attr">databaseId</span>=<span class="hljs-string">&quot;oracle&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">selectKey</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;stuNo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Integer&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;BEFORE&quot;</span>&gt;</span><br>select myseq.nextval from dual<br><span class="hljs-tag">&lt;/<span class="hljs-name">selectKey</span>&gt;</span><br>insert into student(stuno,stuName,stuAge,graName) values (#&#123;stuNo&#125;,# &#123;stuName&#125;,#&#123;stuAge&#125;,#&#123;graName&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过<code>&lt;insert&gt;</code>的字标签<code>&lt;selectKey&gt;</code>实现:<br>在 <code>&lt;selectKey&gt;</code>中查询下一个序列(自增后的值)，再将此值传入<code>keyProperty=&quot; stuNo&quot;</code>属性，最后在真正执行时使用该属性值</p><p>方式二：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addstudent&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.yanqun.entity.Student&quot;</span> <span class="hljs-attr">databaseId</span>=<span class="hljs-string">&quot; oracle&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">selectKey</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;stuNo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Integer&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;AFTER&quot;</span>&gt;</span><br>select myseq. currval from dual<br><span class="hljs-tag">&lt;/<span class="hljs-name">selectKey</span>&gt;</span><br>insert into student(stuno,stuName,stuAge,graName) values(myseq.nextval，#&#123;stuName&#125;,#&#123;stuAge&#125;,#&#123;graName&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="6-参数问题"><a href="#6-参数问题" class="headerlink" title="6.参数问题"></a>6.参数问题</h6><p>目前将多个参数封装到一个javabean对象(pojo) ,然后使用该对象传递<br>a.传入多个参数时，不用在mapper. xml中编写parameterType<br>异常提示：<br>stuNo不能使用。可以使用的是：<code>[arg3,arg2,arg1,arg0,param4,param3,param2,param1]</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">...</span>&gt;</span><br>insert into student (stuno, stuName, stuAge, graName)<br>values (#&#123;arg0&#125;，#&#123;arg1&#125;, # &#123;arg2&#125;, # &#123;arg3&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>b.命名参数<br>可以在接口中通过@Param(“ sNo”)指定sq1中参数的名字<br><code>public abstract Integer addStudent (@Param(&quot; sNo&#39; ) Integer stuNo,...)</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot; addStudent”databaseId=&quot;</span> <span class="hljs-attr">oracle</span>&quot;&gt;</span><br>insert into student (stuno, stuName, stuAge, graName)<br>values (#&#123;sNo&#125;，#&#123;sName&#125;, #&#123;sAge&#125;, #&#123;gName&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>c.综合使用<br><code>Integer addStudent(@Param(&quot;sNo&quot;) Integer stuNo，@Param(”stu&quot;)Student student);</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot; addStudent&quot;</span> <span class="hljs-attr">databaseId</span>=<span class="hljs-string">&quot;oracle&quot;</span>&gt;</span><br>insert into student (stuno, stuName, stuAge, graName)<br>values(#&#123;sNo&#125;，#&#123;stu.stuName&#125;, #&#123;stu.stuAge&#125;, #&#123;stu.graName&#125; )<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="7"><li><h6 id="增null"><a href="#增null" class="headerlink" title="增null"></a>增null</h6></li></ol><p>  oracle: 如果插入的字段是Null，提示错误: Other 而不是null<br>  mysql: 如果插入的字段是Null， 可以正常执行(没有约束)<br>  原因:<br>  各个数据库在mybatis中对各种数据类型的默认值不一致。<br>  mybatis中，jdbcTypeForNu1l (如果是null)，则默认值0THER。Other来说，MySQL能够处理(NULL) ,但是Qracle不行。<br>  解决:<br>  oracle: null -&gt;OTHER , 需要手工告诉oracle:other - &gt;null<br>  a.修改具体的sql标签<br>  当某个数据类型orac1e无法处理时，告诉它用默认值null;注意，此时设置的jdbcType=NULL不会影响正常的赋值(“zs”)</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot; addStudent”databaseId= oracle&quot;</span> &gt;</span><br>insert into student (stuno, stuName)<br>values (#&#123;stuNo&#125;，#&#123;stuName,jdbcType=NULL&#125; )<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  b.配置mybatis全局配置文件conf.xml(推荐)</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot; jdbcTypeForNu1l”value= ”NULL&quot;</span> /&gt;</span><br>&lt;/ settings&gt;<br></code></pre></td></tr></table></figure><h6 id="8-返回值为HashMap的情况"><a href="#8-返回值为HashMap的情况" class="headerlink" title="8.返回值为HashMap的情况"></a>8.返回值为HashMap的情况</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--其中stuNo是数据库的子段名。“no”是stuNo的别名，作为map的key,用于在map中get值时使用map.get(&quot;no”);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryStudentOutByHashMap&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;HashMap&quot;</span>&gt;</span><br>select stuNo &quot;no&quot;,stuName &quot;name&quot;,stuAge &quot;age&quot; from student where stuNo =    #&#123;stuNo&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果不加别名，则map的key就是 字段名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryStudentOutByHashMap” parameterType=&quot;</span><span class="hljs-attr">int</span>&quot; <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;HashMap&quot;</span>&gt;</span><br>select stuNo, stuName, stuAge<br>from student where stuNo = #&#123;stuNo&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 思考:<br>STUNAME: xx007 STUAGE:77 STUNO: 11<br>STUNAME</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">33</span>ZS<span class="hljs-number">22</span><br><span class="hljs-attribute">34</span>ls<span class="hljs-number">22</span><br><span class="hljs-attribute">45</span>WW    <span class="hljs-number">33</span><br><span class="hljs-attribute">87</span>Z<span class="hljs-number">1</span><span class="hljs-number">69</span><br></code></pre></td></tr></table></figure><p>map :<br>key: STUNO    value: Student</p><p>map :<br>key: STUNO    value: Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*程序根据select的返回值 知道map的value就是Student,根据@MapKey(&quot;stuNo&quot;)知道map的key是stuNo*/</span><br><span class="hljs-meta">@MapKey(&quot;STUNO&quot;)</span><br>HashMap&lt; Integer, Student&gt; <span class="hljs-function">queryStudent <span class="hljs-title">sByHashMap</span><span class="hljs-params">()</span> </span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryStudentsByHashMap” resultType=&quot;</span><span class="hljs-attr">HashMap</span>&quot; &gt;</span><br>select stuNo ，stuName , stuAge from student<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在resultMap中 还可以使用鉴别器:对相同sq1中不同字段值进行判断，从而进行不同的处理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--数据库中有真名和昵称；</span><br><span class="hljs-comment">通过使用釜别器:对查询结果进行分支处理:</span><br><span class="hljs-comment"> 如果是a年级，则真名赋值给对象的stuName属性，如果b年级，显示昵称--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap...</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">...</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result...</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">discriminator</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gname&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">case</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.yanqun.entity.Student&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stuName&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">case</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">case</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.yanqun.entity.Student&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;nickname&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot; stuName&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">case</span>&gt;</span><br>&lt;/ discriminator&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="9-别名问题"><a href="#9-别名问题" class="headerlink" title="9.别名问题"></a>9.别名问题</h6><p>如果在批量设置别名时，出现了冲突。可以使用@Alias(“myStudent”)区分。</p><h6 id="10-内置参数"><a href="#10-内置参数" class="headerlink" title="10.内置参数"></a>10.内置参数</h6><p>_parameter：代表mybatis的输入参数。</p><p>_databaseId：当前数据库的值。</p><h6 id="11-模糊查询"><a href="#11-模糊查询" class="headerlink" title="11.模糊查询"></a>11.模糊查询</h6><ul><li><p>${}：原样输出；#：自动拼接引号</p></li><li><p>传值时，直接传%x%</p></li><li><p>bind参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--把传入的参数拼接%%，赋值给_queryName--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bind</span> <span class="hljs-attr">name</span>= =<span class="hljs-string">”_queryName</span>&quot; <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#x27;%&#x27;+tuName+&#x27;%&#x27;&quot;</span>/&gt;</span><br>select * from student where stuName like #&#123;_ queryName&#125; <br></code></pre></td></tr></table></figure><p>通过bind将传入的stuName进行了处理（增加了%…%）</p></li></ul><h5 id="逆向工程的使用"><a href="#逆向工程的使用" class="headerlink" title="逆向工程的使用"></a>逆向工程的使用</h5><ol><li><p>jar(mybatis.jar、mybatis-generator-core.jar、mysql-connector-java.jar)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#mysql</span><br><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">uri</span>=<span class="hljs-string">jdbc:mysql://localhost:3306?people&amp;serverTimezone=GMT</span><br><span class="hljs-attr">user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure></li><li><p>xml模板文件（修改生成路径、表）<br>resource路径下新建<a href="./generatorxml.md">generator.xml</a>文件<br>引入数据库信息<br><code>&lt;properties resource=&quot;db.properties/&quot;&gt;</code><br>添加conf.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;uri&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        加载映射文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;personMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改以下信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span> <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;$&#123;uri&#125;&quot;</span> <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.rdleng.entry&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;constructorBased&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;immutable&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rootClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com._520it.mybatis.domain.BaseDomain&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.rdleng.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.rdleng.mapper&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span>     <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;student&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>根据java模板类一键生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rdleng.test;<br><br><span class="hljs-keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;<br><span class="hljs-keyword">import</span> org.mybatis.generator.config.Configuration;<br><span class="hljs-keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;<br><span class="hljs-keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rdleng</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@mail</span> rdleng@foxmail.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-09-24 20:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMybatis</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;src\\main\\resources\\generator.xml&quot;</span>);<br>        List&lt;String&gt; warnings = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        ConfigurationParser configurationParser = <span class="hljs-keyword">new</span> ConfigurationParser(warnings);<br>        Configuration config = configurationParser.parseConfiguration(file);<br>        DefaultShellCallback callback = <span class="hljs-keyword">new</span> DefaultShellCallback(<span class="hljs-keyword">true</span>);<br>        MyBatisGenerator generator = <span class="hljs-keyword">new</span> MyBatisGenerator(config, callback, warnings);<br>        generator.generate(<span class="hljs-keyword">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h5 id="Mybatis架构和源码"><a href="#Mybatis架构和源码" class="headerlink" title="Mybatis架构和源码"></a>Mybatis架构和源码</h5><img src="https://raw.githubusercontent.com/rdleng/typora-image/master/img/20200925070501.png" alt="mybatis架构" style="zoom:60%;" /><p>Mybatis执行过程：</p><ol><li>获取SqlSessionFactory对象</li><li>获取SqlSession对象</li><li>获取XxxMapper对象（代理接口中的方法、xml中的<select>等标签）</li><li>执行<select>等标签中定义的SQL语句</li></ol><ul><li><p>获取SqlSessionFactory<br>parser解析器<br>通过parseConfiguration()方法设置了properties、settings、enviroments等属性标签<br>将所有配置信息放在Configuration对象中<br>解析所有的mapper.xml文件（分析其中的增删改查标签）<br><code>&lt;select id=&quot;&quot; resultType=&quot;&quot;等属性是通过 parseStatementNode()解析的&gt;</code></p><p>将XxxMapper.xml中的<select>等标签解析成MappedStatement对象，即MappedStatement对象就是<select>等标签<br>MappedStatement对象存在于Configuration中；<br>Enviroment对象存在于Configuration中<br><strong>所有的配置信息、增删改查标签 全部存在于Configuration中</strong><br>Configuration又存在于DefaultSqlSessionFactory对象中（SqlSessionFactory）<br><strong>SqlSessionFactory对象 -&gt; DefaultSqlSessionFactory -&gt; Configuration -&gt; 包含了一切配置信息</strong></p></li><li><p>获取SqlSession对象<br>configuration.newExecutor(tx,exeType); -&gt; SimpleExecutor<br>根据不同的execType，产生不同的Executor，并会对执行器做拦截操作：<br>executor = (Executor)interceptorChain.pluginAll(executor);<br>通过装饰模式，将刚才产生的executor包装成一个更加强大的executor<br>作用：以后如果要给MyBatis写自己的插件，就可以通过拦截器实现。<br>插件开发：1写插件2放入拦截器<br>返回DefaultSqlSession (configurat ion, executor,事务)<br>sqlSession -&gt; openSession() -&gt; openSessionFromDataSource() -&gt; DefaultSqlSession对象<br>sqlSession -&gt; DefaultSqlSession对象 -&gt; 执行SQL</p></li><li><p>获取XxxMapper对象、执行<br>执行增删改查 -&gt; MapperProxy/invoke() –&gt; InvocationHandler：JDK动态代理接口<br>用到了动态代理模式：增删改查 -&gt; 代理对象（MapperProxy对象）-&gt; 代理对象帮我们”代理执行“增删改查<br>mapperMethod.execute(sqlSession.args)：实际调用增删改查的方法，依靠了SqlSession中的configuration和executor..<br>处理增删改查方法的参数：method.convertArgsToSqlCommandParam(args);如果是0个，返回null;如果是1个，返回第一个；如果有多个参数，放入map中<br>查询方法：selectOne() -&gt; selectList()：configuration.getMappedStatement()即获取到用于增删改查的对象。<br>boundSql：将我们写的SQL和参数值进行了拼接后的对象，即最终能够被执行的SQL<br>执行SQL是通过Executor<br>如果缓存中没有要查询的内容，则进入数据库 真实查询：queryFromDataBase()<br>mybatis使用的jdbc对象是PreparedStatement<br>底层执行增删改查：PreparedStatement的execute()<br>mybatis底层在执行CRUD时，可能会涉及到四个处理器：StatementHandler、ParametorHandler、TypeHandler、ResultSetHandler<br><img src="https://raw.githubusercontent.com/rdleng/typora-image/master/img/20200925101546.png" alt="四大处理器Handler"><br>XxxMapper：SqlSession(configuration,executor,事务)、代理接口的对象（MapperInterface）、MethodCache(存放查询缓存，底层是ConcurrentHashMap)</p></li></ul><h6 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h6><p>四大处理：StatementHandler ParameterHandler TypeHandler ResultSetHandler<br>四大核心对象：StatementHandler ParameterHandler ResultSetHandler Executor</p><p>四大核心对象：1、都涉及到了 拦截器 用于增强 2、四大核心对象都包含了 该增强操作<br>自定义插件的编写逻辑：根据MyBatis规则 编写一个拦截器，在拦截器内部加入自定义增强功能</p><p>步骤：</p><ol><li><p>编写拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interceptor</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//拦截</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Invocation invocation)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;拦截方法...intercept()...&quot;</span>);<br>        Object proceed = invocation.proceed();<span class="hljs-comment">//放行</span><br>        <span class="hljs-keyword">return</span> proceed;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">plugin</span><span class="hljs-params">(Object target)</span> </span>&#123;<span class="hljs-comment">//将拦截器中定义的增强功能和原来的核心对象合并起来，称为最终的核心对象</span><br>        Object wrap = Plugin.wrap(target, <span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> wrap;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProperties</span><span class="hljs-params">(Properties properties)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;设置属性&quot;</span> + properties);<span class="hljs-comment">//设置属性</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写签名注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Intercepts(&#123;@Signature(type = StatementHandler.class, method = &quot;query&quot;, args = &#123;</span><br><span class="hljs-meta">        Statement.class, ResultSetHandler.class</span><br><span class="hljs-meta">&#125;)&#125;)</span><br></code></pre></td></tr></table></figure></li><li><p>配置conf.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--&lt;environment&gt;之前--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;my.interceptors.MyInterceptor&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zs&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;23&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写多个拦截器时，执行顺序和<code>&lt;plugins&gt;</code>配置顺序一致</p></li></ol><p>插件<br>select * from student -&gt; 拦截器<br>目标对象target的包装后的产物 -&gt; metaObject.getValue(“可以从target中获取”);<br>通过打印语句 可知，target就是 RoutingStatementHandler<br>–&gt;metaObject.getValue(“可以从RoutingStatementHandler中获取boundSql、parameterHandler”)<br>–&gt;metaObject.getValue(“parameterHandler.parameterObject”)<br>    metaObject.getValue(“parameterHandler.boundSql”) //XxxMapper.xml中的sql语句中的参数值<br>–&gt;只研究<br>    metaObject.getvalue(“parameterHandler.parameterObject”)<br>     metaObject.getValue(“parameterHandler.boundSql.sql”,”select * from book…”)<br>     metaObject.getValue(“parameterHandler.boundSql.parameterObject”,2)  </p><p>拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> my.interceptors;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.executor.statement.StatementHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.*;<br><span class="hljs-keyword">import</span> org.apache.ibatis.reflection.MetaObject;<br><span class="hljs-keyword">import</span> org.apache.ibatis.reflection.SystemMetaObject;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.ResultHandler;<br><br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rdleng</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@mail</span> rdleng@foxmail.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-09-25 10:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Intercepts(&#123;@Signature(type = StatementHandler.class,</span><br><span class="hljs-meta">//        method = &quot;query&quot;, args = &#123;</span><br><span class="hljs-meta">        method = &quot;parameterize&quot;, args = &#123;</span><br><span class="hljs-meta">        Statement.class</span><br><span class="hljs-meta">&#125;)&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//拦截</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Invocation invocation)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;拦截方法...intercept()...&quot;</span>);<br>        Object target = invocation.getTarget();<br>        System.out.println(<span class="hljs-string">&quot;目标对象：&quot;</span>+target);<br>        MetaObject metaObject = SystemMetaObject.forObject(target);<br>        Object value = metaObject.getValue(<span class="hljs-string">&quot;parameterHandler.parameterObject&quot;</span>);<br>        System.out.println(value+<span class="hljs-string">&quot;------&quot;</span>);<br>        metaObject.setValue(<span class="hljs-string">&quot;parameterHandler.parameterObject&quot;</span>,<span class="hljs-number">3</span>);<br>        Object proceed = invocation.proceed();<span class="hljs-comment">//放行</span><br>        <span class="hljs-keyword">return</span> proceed;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">plugin</span><span class="hljs-params">(Object target)</span> </span>&#123;<span class="hljs-comment">//将拦截器中定义的增强功能和原来的核心对象合并起来，称为最终的核心对象</span><br>        Object wrap = Plugin.wrap(target, <span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">return</span> wrap;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProperties</span><span class="hljs-params">(Properties properties)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;设置属性&quot;</span> + properties);<span class="hljs-comment">//设置属性</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rdleng.test;<br><br><span class="hljs-keyword">import</span> com.rdleng.entry.Student;<br><span class="hljs-keyword">import</span> com.rdleng.entry.StudentExample;<br><span class="hljs-keyword">import</span> com.rdleng.mapper.StudentMapper;<br><span class="hljs-keyword">import</span> com.rdleng.mapper.StudentMapperExt;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Reader;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rdleng</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@mail</span> rdleng@foxmail.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-09-24 22:42</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestGeneratorDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Reader reader = Resources.getResourceAsReader(<span class="hljs-string">&quot;conf.xml&quot;</span>);<br>        SqlSessionFactory factory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(reader);<br>        SqlSession session = factory.openSession();<br>        StudentMapperExt mapper = session.getMapper(StudentMapperExt.class);<br>        Student students = mapper.queryStudentByStuId(<span class="hljs-number">1</span>);<br>        System.out.println(students);<br>        session.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="批量操作DML"><a href="#批量操作DML" class="headerlink" title="批量操作DML"></a>批量操作DML</h6><p><code>sessionFactory.openSession(ExecutorType.BATCH);</code> 推荐的方式</p><p>BASH：预编译SQL一次，其余次数 只需要设置参数值即可<br>没有BASH：预编译N次，每次DML都需要执行完整的SQL</p><p>不推荐的方式：拼接SQL </p><p>oracle:批量插入<br>a. create table 表 select … from 旧表<br>b. insert into 表（…） select .. from 表；<br>c. begin ..(DML).. end;<br>d. 数据泵、SQL Loader、外部表<br>以 begin ..DML.. end为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqk">begin <br>    insert into student(stuno,stuname) values (1,&quot;zs&quot;);<br>    insert into student(stuno,stuname) values (2,&quot;ls&quot;);<br>end;<br></code></pre></td></tr></table></figure><p>–核心：将SQL拼接成oracle能够执行的SQL；collection的参数必须是collection或List</p><p>MySQL：批量插入<br><code>insert into student(stuNo,stuName) values(100,&#39;zs&#39;),(200,&#39;ls&#39;)</code></p><p>这种批量插入方式不推荐：1. 没有用到Mybatis对批量插入的支持 2.不适合数据库迁移 3.如果有大量数据，则会将拼接的SQL语句拉的很长，而部分数据库对SQL语句的长度有限制。</p><h6 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h6><p><a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/en/HowToUse.md">Page Helper</a></p><ol><li><p>添加Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- config params as the following --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;param1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;value1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> Page&lt;Object&gt; page  = PageHelper.startPage(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>);<br>List&lt;User&gt; list = userMapper.selectIf(<span class="hljs-number">1</span>);<br><span class="hljs-comment">//根据page获取分页信息 page.getXxx();</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">或将查询结果list作为参数传入PageInfo构造方法</span><br><span class="hljs-comment">  PageInfo&lt;Student&gt; pageInfo = new PageInfo&lt;&gt;(list);</span><br><span class="hljs-comment">  pageInfo.getXxx();//pageInfo比page更为强大</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ol><h6 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis Plus"></a>Mybatis Plus</h6><p><a href="https://baomidou.com/">MyBatis-Plus</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ORM(hibernate mybatis jpa)：数据 student (no,name)  对象Student<br>(studentNo,studentName)</p><p>Mybatis + MyBatisPlus：只做增强，不做改变</p><p>前置课程：maven + Spring + mybatis</p><p>开发MyBatis Plus<br>    1.jar<br>    2.数据表（student） 类（Student）<br>    3.MyBatis配置文件</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2021/09/06/Git/"/>
    <url>/2021/09/06/Git/</url>
    
    <content type="html"><![CDATA[<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p><a href="https://git-scm.com/book/zh/v2">Git 官方文档</a></p><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>windows 安装 git 软件后需要配置编码格式 zh_CN 为 UTF8，否则会乱码。</p><h5 id="Git-基本配置"><a href="#Git-基本配置" class="headerlink" title="Git 基本配置"></a>Git 基本配置</h5><p>配置当前用户用户名，邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --system user.name <span class="hljs-string">&quot;rdleng&quot;</span><br>git config --system user.email <span class="hljs-string">&quot;rdleng@foxmail.com&quot;</span><br></code></pre></td></tr></table></figure><p>解决 Windows 终端 Git 中文显示乱码的问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global core.quotepath <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>具体配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 基本不用，配置整个计算机，配置信息在用户根目录下的 .gitconfig 文件中</span><br>git config --global [user.name|user.email] <span class="hljs-string">&quot;rdleng@foxmail.com&quot;</span><br><span class="hljs-comment"># 推荐使用，当前用户，配置文件为 ~/.gitconfig</span><br>git config --system<br><span class="hljs-comment"># 当前项目，配置文件为 .git/config</span><br>git config --<span class="hljs-built_in">local</span>   <br><span class="hljs-comment"># 忽略特定类型文件  dir/**/*.txt  :任意级别目录；.gitignore 文件在项目根目录下</span><br>vim .gitignore <br></code></pre></td></tr></table></figure><h5 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看帮助信息</span><br>git --<span class="hljs-built_in">help</span><br><span class="hljs-comment"># 查看工作区状态</span><br>git status<br><span class="hljs-comment"># 查看工作区异同</span><br>git diff <br><span class="hljs-comment"># 查看暂存区异同</span><br>git diff --cached<br><span class="hljs-comment"># 查看历史（n 为最近 n 条记录）</span><br>git <span class="hljs-built_in">log</span> [-n] <br><span class="hljs-comment"># 一行方式查看日志 </span><br>git <span class="hljs-built_in">log</span> --pretty=oneline <br><span class="hljs-comment"># 指定格式打印日志</span><br>git <span class="hljs-built_in">log</span> --format=<span class="hljs-string">&#x27;%h - %an,%ar : %s&#x27;</span>  <br><span class="hljs-comment"># 图形化方式查看提交历史</span><br>git <span class="hljs-built_in">log</span> --graph --pretty=oneline --abbrev-commit <br><span class="hljs-comment"># 查看所有提交记录</span><br>git reflog <br><span class="hljs-comment"># 查看远程仓库分支历史</span><br>git <span class="hljs-built_in">log</span> refs/remotes/origin/master --pretty=oneline --abbrev-commit <br><span class="hljs-comment"># 查看分支</span><br>git branch<br></code></pre></td></tr></table></figure><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个空 Git 仓库或重新初始化已存在的仓库</span><br>git init <br><span class="hljs-comment"># 所有文件(.gitignore 中未设置的) 工作区 -&gt; 暂存区</span><br>git add . <br><span class="hljs-comment"># 暂存区 -&gt; 提交</span><br>git commit -m <span class="hljs-string">&#x27;message&#x27;</span><br><span class="hljs-comment"># 合并 add 和 commit</span><br>git commit -am <span class="hljs-string">&#x27;message&#x27;</span> <br></code></pre></td></tr></table></figure><h5 id="反悔操作"><a href="#反悔操作" class="headerlink" title="反悔操作"></a>反悔操作</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 暂存区 -&gt; 工作区</span><br>git rm --cached &lt;文件名&gt; <br><span class="hljs-comment"># 修改提交说明</span><br>git commit --amemt -m <span class="hljs-string">&#x27;修正&#x27;</span> <br><span class="hljs-comment"># 删除第一次提交，或者删除 .git/ 重新 git init</span><br>git update-ref -d HEAD<br><span class="hljs-comment"># 本地分支回退到上次提交（第一次提交不能使用）；soft:工作区暂存区内容不变；mixed:工作区内容不变；hard: 所有改变全部丢失</span><br>git reset --[soft|mixed|hard] head^<br><span class="hljs-comment"># 远程 master 分支覆盖本地分支；master 可换为其他分支</span><br>git reset --hard orgin/master<br><span class="hljs-comment"># 撤销对文件的修改（还原到上次提交时的状态）</span><br>git checkout &lt;文件名&gt; <br></code></pre></td></tr></table></figure><h5 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除已提交的文件并放入暂存区；提交之后彻底删除</span><br>git rm &lt;文件名&gt; <br><span class="hljs-comment"># 操作系统删除；工作区</span><br>rm &lt;文件名&gt; <br><span class="hljs-comment"># 移动，重命名文件，文件夹</span><br>git mv <br><span class="hljs-comment"># 从仓库克隆项目到新目录</span><br>git <span class="hljs-built_in">clone</span> <span class="hljs-string">&quot;项目链接&quot;</span><br><br><span class="hljs-comment"># 图形化工具</span><br><span class="hljs-comment"># git gui  ： gitk 、gui 、github desktop</span><br></code></pre></td></tr></table></figure><h5 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看分支; -av 查看本地和远程所有分支</span><br>git branch <br><span class="hljs-comment"># 创建新分支</span><br>git branch [分支名]<br><span class="hljs-comment"># 重命名分支</span><br>git branch -m [分支名] [新分支名] <br><span class="hljs-comment"># 切换分支</span><br>git checkout [分支名]<br><span class="hljs-comment"># 创建新分支并切换</span><br>git checkout -b [分支名] <br><span class="hljs-comment"># 创建分支并追踪远程分支</span><br>git checkout -b <span class="hljs-built_in">test</span> --track origin/<span class="hljs-built_in">test</span><br>git checkout --track origin/aaa<br><span class="hljs-comment"># 合并分支</span><br>git merge [分支名] <br><span class="hljs-comment"># 强制删除分支，无需合并</span><br>git branch -D [分支名] <br><span class="hljs-comment"># 删除分支，需合并</span><br>git branch -d <br><span class="hljs-comment"># 1.如果在分支 A 中进行了写操作，但此操作局限在工作区中进行（没 add commit）。在 master 中能够看到该操作。  </span><br><span class="hljs-comment"># 如果分支 A 中进行了写操作  进行了 commit（对象区），则 master 中无法观察到此文件</span><br><span class="hljs-comment"># 2.如果在分支 A 中进行了写操作，但此操作局限在工作区中进行（没 add commit）。删除分支 A 是可以成功的。</span><br><span class="hljs-comment"># 删除远程 test 分支</span><br>git push origin :<span class="hljs-built_in">test</span> <br><span class="hljs-comment"># 删除远程 dev 分支</span><br>git push origin --delete dev <br><span class="hljs-comment"># 用 src（本地） 分支来更新 dest（远程） 分支</span><br>git push origin src:dest <br>git push origin dev:dev2 <br>git push origin HEAD:dev2<br><span class="hljs-comment"># 相当于 git pull + git checkout 新分支</span><br>git pull origin 远程分支:新分支 <br><span class="hljs-comment"># 本地没有a分支，但本地却感知远端的a分支。  </span><br>git remote prune origin --dry-run <span class="hljs-comment"># 检测</span><br><span class="hljs-comment"># 清理无效的 追踪分支（本地中感知的远程分支）</span><br>git remote prune origin<br><span class="hljs-comment"># 版本穿梭</span><br>git reset --hard head~n <span class="hljs-comment"># 切换到前 n 次提交，结合 git reflog</span><br><span class="hljs-comment"># 起别名</span><br>git config --global alias.sh checkout <br></code></pre></td></tr></table></figure><h6 id="保存现场"><a href="#保存现场" class="headerlink" title="保存现场"></a>保存现场</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 建议：功能未开发完毕前，不要 commit;</span><br><span class="hljs-comment"># 规定：没有 commit 之前，不能 checkout 切换分支（不在同一个 commit 阶段）；</span><br><span class="hljs-comment"># 如果某一个功能未开发完毕就要切换分支：建议 1.保存现场（临时保存，stash）  2.切换</span><br><span class="hljs-comment"># 保存现场</span><br>git stash<br><span class="hljs-comment"># 还原现场(默认还原最近一次，越远数字越大)</span><br>git stash pop <span class="hljs-comment"># 将原来保存的删除， 用于还原内容</span><br>git stash apply <span class="hljs-comment"># 还原内容，不删除原保存的内容</span><br>git stash apply stash@&#123;1&#125; <span class="hljs-comment">#指定某一次现场</span><br>git stash drop stash@&#123;0&#125; <span class="hljs-comment">#手工删除现场</span><br>git stash list <span class="hljs-comment"># 查看现场</span><br><span class="hljs-comment">#（了解即可） 如果不同分支在同一 commit 阶段，在 commit 之前，可以 chekcout 切换分支</span><br></code></pre></td></tr></table></figure><h6 id="Tag-标签"><a href="#Tag-标签" class="headerlink" title="Tag 标签"></a>Tag 标签</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash"> <span class="hljs-comment"># 添加 tag，简单标签，只存储当前 commit 的 sha1 值</span><br>git tag xxx<br><span class="hljs-comment"># 查看 tag</span><br>git tag <br><span class="hljs-comment"># 创建一个新对象，会产生一个新的 commit/sha1 存储信息，其中包含了当前 commit 的 sha1 值</span><br>git tag -a v2.0 -m <span class="hljs-string">&#x27;我的 v2.0 版本&#x27;</span> <br><span class="hljs-comment"># 推送标签</span><br>git push origin v1.0 v2.0<br>git push origin --tags<br><span class="hljs-comment"># 完整推送</span><br>git push origin refs/tags/v1.0:refs/tags/v1.0<br><span class="hljs-comment"># 获取远程标签</span><br><span class="hljs-comment"># 若远程新增标签，可以拉取；若远程删除标签，则本地不能获取</span><br>git pull <br>git fetch origin tag v4.0<br>git tag -d [标签名] <span class="hljs-comment"># 删除标签</span><br><span class="hljs-comment"># 删除远程标签，其他用户无法感知</span><br>git push origin :refs/tags/v1.0<br><br><span class="hljs-comment"># blame 责任</span><br>git blame a.txt <span class="hljs-comment"># 查看 a.txt 的所有提交以及每一行的作者</span><br><span class="hljs-comment">#压缩 objects、refs 中记录了很多 commit 的 sha1 值，如果执行 gc 则会将这么多 sha1 值存放到一个压缩文件中 packed-refs</span><br>git gc<br><br><span class="hljs-comment"># 比较两个文件不同</span><br>diff a.txt b.txt<br><span class="hljs-comment"># diff 比较文件内容不同 git diff 比较区中文件</span><br>git diff <span class="hljs-comment"># 最新对象区和工作区的不同</span><br>git diff commit 的 sha1 值 <span class="hljs-comment"># 对象区和工作区的不同</span><br>git diff --cached commit 的 sha1 值 <span class="hljs-comment"># 暂存区和工作区的不同</span><br>git diff --cached head <span class="hljs-comment"># 最新暂存区和工作区的不同，head 可以省略</span><br><br><span class="hljs-comment"># 上传拉取操作</span><br>git push <span class="hljs-comment"># 本地 -&gt; 远程</span><br>git pull <span class="hljs-comment"># fetch+merge 远程 -&gt; 本地</span><br><span class="hljs-comment"># 推送</span><br>git remote add origin https://github.com/rdleng/[项目名].git<br>git remote add origin git@github.com:rdleng/[项目名].git <span class="hljs-comment"># ssh 与远端仓库取得联系</span><br>git pull origin master <span class="hljs-comment"># 首次提交时需要先从远端拉取 pull = fetch + merge</span><br><span class="hljs-comment"># 若有冲突首先 git status/diff 查看冲突，修改之后 git commit -am &#x27;&#x27;，最后推送到远程仓库</span><br>git push -u origin master <span class="hljs-comment"># master，后续修改推送时，只需要git push</span><br><span class="hljs-comment"># 上传方法二</span><br>git push --set-upstream origin <span class="hljs-built_in">test</span><br>git remote show <span class="hljs-comment"># 查看</span><br>git remote show origin<br>git remote -v <span class="hljs-comment"># 查看</span><br>git remote rm origin <span class="hljs-comment"># 删除 origin </span><br><span class="hljs-comment"># pull -&gt; vi -&gt; add -&gt; commit -&gt; push</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># refs ：标签、head、remote</span><br><span class="hljs-comment"># objects：对象 ,git 每一次 version 的全量内容</span><br><span class="hljs-comment"># git 裸库：没有工作区的工作仓库，存在于服务端</span><br><br><span class="hljs-comment"># submodule ：子模块 应用场景 ：在一个仓库中引用另一个仓库的代码。</span><br><span class="hljs-comment"># A 中有 B 库，但 B push 之后 A 无法直接感知，需要主动操作：pull</span><br><span class="hljs-comment">#    1.进入 A/B 中 pull</span><br><span class="hljs-comment">#    2.直接在 A 中迭代 pull（将 A 中的所有 submodule 全部 pull）：git submodule foreach git pull</span><br><span class="hljs-comment"># B 修改 -&gt; push -&gt;  A（本地+远程）无法感知</span><br><span class="hljs-comment"># 本地 pull：本地有，A的远程没：本地 add ..commit -&gt; push</span><br><span class="hljs-comment"># 如果 push B,则 B 本身能够感知；但是 A 中的 B 不能直接感知</span><br><span class="hljs-comment"># 如果 clone 的项目包含 submodule，则 clone 方法：</span><br>git <span class="hljs-built_in">clone</span> git@github.com:yanqun/A.git --recursive<br><span class="hljs-comment"># 工作区</span><br>rm -rf B<br><span class="hljs-comment"># 暂存区</span><br>git rm --cached B<br><span class="hljs-comment"># -&gt; commit .  push.</span><br><span class="hljs-comment"># 建议：submodule 单向操作</span><br><span class="hljs-comment"># substree：双向、简单</span><br><br><span class="hljs-comment"># SSH</span><br><span class="hljs-comment"># (父)指定仓库地址</span><br>git remote add origin git@github.com:yanqun/parent.git<br><span class="hljs-comment"># 再指定分支</span><br>git push -u origin master<br><span class="hljs-comment"># (子)</span><br>git remote add origin git@github.com:yanqun/subtree.git<br>git push -u origin master<br><br><span class="hljs-comment">#（父-子）</span><br>git remote add subtree-origin git@github.com:yanqun/subtree.git<br>git subtree add -P subtree subtree-origin  master<br><span class="hljs-comment"># 等价 git subtree add --prefix subtree subtree-origin  master</span><br><span class="hljs-comment"># 另一种方式</span><br>git subtree add -P subtree2 subtree-origin  master --squash<br><span class="hljs-comment"># --squash：合并 commit，为了防止 子工程干扰父工程</span><br><span class="hljs-comment"># squash：减少 commit 的次数</span><br><br><span class="hljs-comment"># 父 - 子</span><br>git <span class="hljs-built_in">log</span><br><span class="hljs-comment"># 子：a,b,c,d,e  5commit  subtree</span><br><span class="hljs-comment"># --squash -&gt; f  合并 1 次提交，1 次新的提交 subtree2</span><br><span class="hljs-comment"># 加了 squash 之后：1、会产生新的提交 (很容易冲突)  2、往前走两步 commit   </span><br><span class="hljs-comment"># --结论：在做 subtree</span><br><span class="hljs-comment">#如果加 squash，以后每次都加（git subtree 开头的命令，要么都加  要么都不加）</span><br><span class="hljs-comment"># 如果不加，都不要加</span><br><span class="hljs-comment">#-如果是同一个祖先，则可能不会冲突。</span><br><span class="hljs-comment">#-如果不是同一个祖先，很可能冲突 </span><br><span class="hljs-comment">#在 subtree submodule 容易冲突（有 2 个解决） -&gt; vi add commit push </span><br><span class="hljs-comment">#核心流程：</span><br><span class="hljs-comment">#子 -&gt; 父中 子有反应</span><br><span class="hljs-comment">#1.修改子工程 push</span><br><span class="hljs-comment">#2（本地）将 github 中的子工程更新到父中子模块</span><br> git subtree pull -P subtree subtree-origin master<br><br><span class="hljs-comment">#3.父中子模块的更新情况推送到对应的 github 上（父-子）</span><br><span class="hljs-comment"># 修改 父工程中子模块-&gt;子模块</span><br><span class="hljs-comment"># 如何将本地修改的内容（父-子）推送到远程中真实的子模块中：</span><br>git subtree push -P subtree subtree-origin master<br><span class="hljs-comment"># 如果要操作真实的子模块： git subtree pull/push -P</span><br><span class="hljs-comment"># 冲突：修改同一文件的同一行、不是同一祖先、不规范 </span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cherry-pick :如果写了一半 (已经提交)，发现写错分支，需要将已提交的 commit 转移分支，每次只能转移（复制）一个 commit ，内容会被复制，但是 sha1 会变</span><br><span class="hljs-comment"># 思路：cherry-pick 复制到应该编写的分支上；把写错分支删除（checkout 旧节点，删除分支）；新建分支</span><br><span class="hljs-comment"># cherry-pick  在复制的时候，不要 commit 节点复制</span><br><span class="hljs-comment"># rebase:变基（衍合 ：改变分支的根基：编写代码的地方</span><br><span class="hljs-comment"># rebase 会改变提交历史</span><br><span class="hljs-comment"># rebase 之后的提交线路 是一条直线</span><br><span class="hljs-comment"># 如果 B 转到 A；  </span><br><span class="hljs-comment">#cherry-pick：在 A 中操作</span><br><span class="hljs-comment">#rebase：在 B 中操作</span><br><span class="hljs-comment"># git rebase 转移的分支名</span><br><span class="hljs-comment"># rebase也会冲突：</span><br><span class="hljs-comment">#a.解决冲突</span><br><span class="hljs-comment"># vi ... add .    git rebase --continue</span><br><span class="hljs-comment">#b.忽略冲突（放弃 rebase 所在分支的修改，直接使用其他分支）</span><br> git rebase --skip<br><br><span class="hljs-comment"># 终止,还原成 rebase 之前的场景</span><br> git rebase --abort<br><br><span class="hljs-comment"># 建议：</span><br><span class="hljs-comment">#reabase 分支只在本机操作，不要推送 github</span><br><span class="hljs-comment">#不要在 master 上直接 rebase</span><br><br><span class="hljs-comment"># git  - gradle </span><br><span class="hljs-comment"># jar :maven </span><br><span class="hljs-comment"># gradle -&gt; Maven   </span><br><span class="hljs-comment"># 下载、解压缩</span><br><span class="hljs-comment"># gradle -&gt;maven</span><br><span class="hljs-comment"># gradle 实际是在 maven 仓库中获取 jar </span><br><span class="hljs-comment"># pom.xml  - build.gradle</span><br><span class="hljs-comment"># 配置jdk</span><br><span class="hljs-comment"># cmd开发：</span><br><span class="hljs-comment">#  GRADLE_HOME：gradle安装目录</span><br><span class="hljs-comment"># GRADLE_USER_HOME   本地仓库（本地存放 JAR 的目录）</span><br><span class="hljs-comment">#  PATH：%GRADLE_HOME%\bin</span><br><br><span class="hljs-comment"># idea 开发(本地仓库)</span><br><span class="hljs-comment">#idea:settings-gradle ：Service directory path</span><br><span class="hljs-comment"># web服务器？</span><br><span class="hljs-comment">#gradle 或 maven 中 可以通过编码配置 产生 web 服务器环境 </span><br><span class="hljs-comment">#gradle:gretty</span><br><span class="hljs-comment"># gretty -》tomcat</span><br><span class="hljs-comment"># appRun</span><br><span class="hljs-comment"># appRunDebug</span><br><span class="hljs-comment">#--结束： 按任意键</span><br><span class="hljs-comment"># appStart</span><br><span class="hljs-comment"># appStartDebug</span><br><span class="hljs-comment">#--结束：appStop</span><br><span class="hljs-comment"># 自动生成的文件</span><br><span class="hljs-comment"># 1.</span><br><span class="hljs-comment"># @WebServlet(name = &quot;MyServlet&quot;) 改成 @WebServlet(urlPatterns = &quot;/MyServlet&quot;)</span><br><span class="hljs-comment"># 2. metadata-complete=&quot;false&quot;&gt;</span><br><br><br><span class="hljs-comment"># 运行：gradle appRun、gradle appStart-》直接访问</span><br><br><span class="hljs-comment"># 调试：1配置 </span><br><span class="hljs-comment">#    debugPort = 8888   （5005）</span><br><span class="hljs-comment">#       debugSuspend = true</span><br><span class="hljs-comment">#2.gradle appRunDebug/gradle appStartDebug</span><br><span class="hljs-comment">#3.监听服务</span><br><span class="hljs-comment">#配置 Configuration - Remote  : 8888 </span><br><span class="hljs-comment">#   启动调试</span><br><span class="hljs-comment">#4.访问</span><br><span class="hljs-comment"># 在idea中使用git托管项目（版本控制）</span><br><span class="hljs-comment">#将idea中默认的cmd更换 bash.exe  重启</span><br><br><span class="hljs-comment"># GitLab</span><br><span class="hljs-comment">#下载 gitlab-ce-11.9.0-ce.0.el7.x86_64.rpm </span><br><span class="hljs-comment">#下载地址 https://packages.gitlab.com/gitlab/gitlab-ce</span><br><span class="hljs-comment"># 搭建 centos7  、阿里云 centos7</span><br><span class="hljs-comment"># centos6 -&gt; centos7</span><br><span class="hljs-comment"># centos7 和 centos6 在安装配置时只有以下3点不一样：</span><br><span class="hljs-comment"># 1 hostnamectl set-hostname bigdata02</span><br><span class="hljs-comment"># 2网卡ifcfg-ens33</span><br><span class="hljs-comment">#centos7 不需要删除 70-persistent-net.rules</span><br><span class="hljs-comment"># 3 systemctl start  firewalld systemctl stop firewalld</span><br><span class="hljs-comment"># 如果都不会搭建，上网搜资料</span><br><span class="hljs-comment"># gitlab -&gt; centos 7</span><br><span class="hljs-comment"># gitlab ee（收费）  </span><br><span class="hljs-comment"># gitlab ce</span><br><br><br><span class="hljs-comment">#安装说明 https://about.gitlab.com/install/</span><br><span class="hljs-comment">#1. Install and configure the necessary dependencies</span><br><span class="hljs-comment">#2  离线安装</span><br><span class="hljs-comment">#rpm -ivh gitlab-ce-11.9.0-ce.0.el7.x86_64.rpm</span><br><span class="hljs-comment">#3.  </span><br><span class="hljs-comment"># EXTERNAL_URL=&quot;http://centos7的IP&quot;</span><br><span class="hljs-comment"># EXTERNAL_URL=&quot;http://192.168.2.129&quot;</span><br><br><span class="hljs-comment"># 修改配置文件</span><br><span class="hljs-comment">#/opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml</span><br><span class="hljs-comment">#host：centos7 的 IP</span><br><br><br><span class="hljs-comment"># gitlab-ctl reconfigure</span><br><br><span class="hljs-comment">#补救 本机的 hosts 文件中 增加映射 192.168.2.129  gitlab.example.com</span><br><span class="hljs-comment">#启动</span><br><span class="hljs-comment">#gitlab-ctl start/stop</span><br><br><span class="hljs-comment">#关闭防火墙</span><br><span class="hljs-comment">#访问服务的地址 192.168.2.129  root 设置密码</span><br><br><span class="hljs-comment"># gitlab-ctl restart</span><br><br><br><span class="hljs-comment"># 后续 就可以在 gitlab中 进行团队开发（group项目 ），自己学习 private</span><br><br><br><span class="hljs-comment"># 如果“另一个应用程序是：PackageKit”</span><br><span class="hljs-comment"># 解决：</span><br><span class="hljs-comment"># /etc/yum/pluginconf.d/langpacks.conf       enabled = 0 ;     yum update  -&gt; reboot</span><br></code></pre></td></tr></table></figure><h6 id="远端仓库拉取到本地"><a href="#远端仓库拉取到本地" class="headerlink" title="远端仓库拉取到本地"></a>远端仓库拉取到本地</h6><ol><li><code>git init</code></li><li><code>git remote add origin https://gitee.com/rdleng0/typora-img.git</code> 与远端仓库取得联系<br>查看远程仓库地址<br><code>git remote -v</code><br>修改为通过 ssh 链接远程仓库<br><code>ssh: git remote set-url origin rdleng0@gitee.com:rdleng0/xxx.git</code></li><li><code>git fetch origin master</code>（主分支可省略）</li><li><code>git checkout -b master origin/master</code> 本地创建分支与要拉取分支名字一致（主分支可省略）</li><li><code>git pull origin master</code> 拉取分支</li></ol><h6 id="同一个电脑配置多个-git"><a href="#同一个电脑配置多个-git" class="headerlink" title="同一个电脑配置多个 git"></a>同一个电脑配置多个 git</h6><p>   0.新建.ssh目录<br>    <code>mkdir ~/.ssh</code></p><ol><li><p>生成密钥对<br><code>ssh-keygen -t rsa -C &quot;你的邮箱@xxx.com&quot;</code>  (公钥名要注意区分)</p></li><li><p>新建 config 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># gitee 测试时用ssh -t Hosh@gitee.com</span><br>Host rdleng<br>HostName gitee.com <span class="hljs-comment">#真实域名地址</span><br>User 1004033149@qq.com <span class="hljs-comment">#配置使用用户名</span><br>PreferredAuthentications publickey <span class="hljs-comment">#配置登录时用什么权限认证--可设置publickey,password publickey,keyboard-interactive等</span><br>IdentityFile ~/.ssh/gitee_forRdleng0_id_rsa <span class="hljs-comment">#这里是id_rsa的地址</span><br><br><span class="hljs-comment"># gitee</span><br>Host rdleng0<br>HostName gitee.com<br>User rdleng@foxmail.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/gitee_id_rsa<br><br><span class="hljs-comment"># github</span><br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/github_id_rsa<br></code></pre></td></tr></table></figure></li><li><p>使用<code>ssh-add</code>将密钥添加到 <code>ssh-agent</code> 保管</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-add ~/.ssh/id_rsa_github<br>ssh-add ~/.ssh/id_rsa_gitee<br></code></pre></td></tr></table></figure><p>出现错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Could not open a connection to your authentication agent.<br></code></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-agent bash --login -i<br></code></pre></td></tr></table></figure></li><li><p>将公钥添加到 Gitee 和 GitHub</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># You&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span><br><span class="hljs-comment"># Connection to gitee.com closed.解决方案</span><br>git pull origin master --allow-unrelated-histories<br></code></pre></td></tr></table></figure><p>解决windows执行<code>ssh-add ~/.ssh/gitee_id_ras</code>时报<code>no such file</code>错误：</p><ol><li>查看<code>ssh agent</code>服务是否开启<br> <code>get-service ssh*</code><br> <img src="https://gitee.com/rdleng0/typora-img/raw/master/img/20201004103355.png" alt="image-20201004103325219"></li><li>启动 ssh-agent 服务<br> <code>start-service ssh-agent</code></li><li>使用 <code>ssh-add</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> PS H:\giteedemo&gt; git push typora-img <span class="hljs-built_in">test</span></span><br><span class="hljs-meta">#</span><span class="bash"> remote: You <span class="hljs-keyword">do</span> not have permission push to this repository</span><br><span class="hljs-meta">#</span><span class="bash"> fatal: unable to access <span class="hljs-string">&#x27;https://gitee.com/rdleng0/typora-img.git/&#x27;</span>: The requested URL returned error: 403</span><br><span class="hljs-meta">#</span><span class="bash"> 此命令会在push时提示输入用户名密码</span><br> git config --system --unset credential.helper<br></code></pre></td></tr></table></figure><ol start="5"><li>验证 ssh 是否配置成功</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@gitee.com<br></code></pre></td></tr></table></figure><p>一个练习 Git 的网站：<br><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Branching</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Obsidian 通过坚果云和 FolderSync 实现同步</title>
    <link href="/2021/09/05/Obsidian%20%E9%80%9A%E8%BF%87%E5%9D%9A%E6%9E%9C%E4%BA%91%E5%92%8C%20FolderSync%20%E5%AE%9E%E7%8E%B0%E5%90%8C%E6%AD%A5/"/>
    <url>/2021/09/05/Obsidian%20%E9%80%9A%E8%BF%87%E5%9D%9A%E6%9E%9C%E4%BA%91%E5%92%8C%20FolderSync%20%E5%AE%9E%E7%8E%B0%E5%90%8C%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<p>Obsidian 自带同步服务每月需要 4 刀，通过坚果云和第三方同步软件 FolderSync 可实现 Windows 和 Android 的双向同步。坚果云免费账号每月上传流量 1GB，下载流量 3GB，用来同步笔记的话暂时够用。</p><p>一、坚果云 Windows 端</p><ol start="0"><li><p>下载坚果云 PC 端（略）</p></li><li><p>注册登录（略） </p></li><li><p>坚果云 PC 端设置同步文件夹</p><p>  在任意盘符下新建一个同步文件夹或将一个文件夹右键通过坚果云同步。这里以 <code>F://obsidian</code> 文件夹为例。</p></li></ol><p>二、坚果云 Android 端</p><ol><li><p>下载 坚果云 Android 端（略）</p></li><li><p>配置坚果云 Android 端</p><p> <strong>设置 -&gt; 第三方应用管理 -&gt; 添加应用密码</strong>。名称为 “obsidian”， 生成的密码一会儿用到。</p><p> <img src="https://gitee.com/rdleng0/typora-img/raw/master/typora-img/img/image-20210905085759924.png" alt="image-20210905085759924"></p></li></ol><p>三、FolderSync</p><ol><li><p>下载</p><p>通过技术手段在 <em>谷歌商店</em> 下载。</p></li><li><p>配置</p><p>添加账户 -&gt; 选择 WebDAV</p><p><img src="https://gitee.com/rdleng0/typora-img/raw/master/typora-img/img/image-20210905090347262.png"></p><p>将账户，应用密码，服务器地址依次填入，点击保存。</p><p>新建 FolderPairs ，选择 WebDAV。</p><p><img src="https://gitee.com/rdleng0/typora-img/raw/master/typora-img/img/1630804815(1).png"></p><p>设置双向同步，选择远程文件夹为上面坚果云设置的 obsidian 同步文件夹，本地文件夹任意，保存即可。</p><p><img src="https://gitee.com/rdleng0/typora-img/raw/master/typora-img/img/20210905092434.png"></p><p>需要同步时点击同步按钮即可。</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/402587731">https://zhuanlan.zhihu.com/p/402587731</a></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA 配置终端为 cmder</title>
    <link href="/2021/07/16/IDEA-%E9%85%8D%E7%BD%AE%E7%BB%88%E7%AB%AF%E4%B8%BA-cmder/"/>
    <url>/2021/07/16/IDEA-%E9%85%8D%E7%BD%AE%E7%BB%88%E7%AB%AF%E4%B8%BA-cmder/</url>
    
    <content type="html"><![CDATA[<p>widows 自带 cmd 命令行太丑，而且不能使用 linux 命令。因此使用 cmder 作为 IDEA 内的终端。</p><ol><li><h6 id="IDEA-安装-Terminal-插件"><a href="#IDEA-安装-Terminal-插件" class="headerlink" title="IDEA 安装 Terminal 插件"></a>IDEA 安装 Terminal 插件</h6><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">file</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">settings</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">plugins</span> -&gt;</span> terminal<br></code></pre></td></tr></table></figure><img src="https://gitee.com/rdleng0/typora-img/raw/master//img/20210716231019.png" alt="image-20210716231017583" style="zoom:80%;" /></li><li><h6 id="配置-cmder-环境变量"><a href="#配置-cmder-环境变量" class="headerlink" title="配置 cmder 环境变量"></a>配置 cmder 环境变量</h6><p>添加系统变量，变量名 <code>CMDER_ROOT</code>，变量值为 cmder 安装路径。</p><img src="https://gitee.com/rdleng0/typora-img/raw/master//img/20210716231243.png" alt="image-20210716231237355" style="zoom:80%;" /></li><li><h6 id="file-gt-settings-gt-Tools-gt-Terminal-中的-Shell-Path-中添加"><a href="#file-gt-settings-gt-Tools-gt-Terminal-中的-Shell-Path-中添加" class="headerlink" title="file -&gt; settings -&gt; Tools -&gt; Terminal 中的 Shell Path 中添加"></a>file -&gt; settings -&gt; Tools -&gt; Terminal 中的 Shell Path 中添加</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;cmd.exe&quot;</span> /k <span class="hljs-string">&quot;&quot;</span>%CMDER_ROOT%\vendor\init.bat<span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/rdleng0/typora-img/raw/master//img/20210716231454.png" alt="image-20210716231438163" style="zoom: 50%;" /></li><li><h6 id="重启-IDEA-并验证"><a href="#重启-IDEA-并验证" class="headerlink" title="重启 IDEA 并验证"></a>重启 IDEA 并验证</h6></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSSHub + FreshRSS + FluentReader 实现 RSS 订阅</title>
    <link href="/2021/07/03/RSSHub-FreshRSS-FluentReader-%E5%AE%9E%E7%8E%B0-RSS-%E8%AE%A2%E9%98%85/"/>
    <url>/2021/07/03/RSSHub-FreshRSS-FluentReader-%E5%AE%9E%E7%8E%B0-RSS-%E8%AE%A2%E9%98%85/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么要使用-RSS"><a href="#为什么要使用-RSS" class="headerlink" title="为什么要使用 RSS ?"></a>为什么要使用 RSS ?</h2><p>避免推荐算法，腾讯某副总裁说 “你喜欢看猪食，看到的全是猪食。”；聚合感兴趣的内容，不用再去各个 APP 不断刷新，有更新可用通过在线 FreshRSS 服务和 PC 端 FluentReader 等软件推送。</p><p>由于 RSS 理念天生具有反广告性，很难在国内流行；同时优质的 RSS 源不容易寻找，容易失效；有人认为精华在评论部分，通过 RSS 订阅和去软件没什么区别。</p><p>目前个人认为可以将行业大佬的博客，关注的项目更新信息等信息流使用 RSS 来管理以提高效率。至于 bilibili 视频等直接去原网站查看即可。</p><h2 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h2><p>查看系统版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat /etc/redhat-release<br><span class="hljs-comment"># CentOS Linux release 7.9.2009 (Core)</span><br></code></pre></td></tr></table></figure><p>查看是否安装 wget</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm  -aq | grep <span class="hljs-string">&quot;wget&quot;</span><br><span class="hljs-comment"># wget-1.14-18.el7_6.1.x86_64</span><br></code></pre></td></tr></table></figure><p>若没有安装则使用如下命令安装 wget</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y wget<br></code></pre></td></tr></table></figure><p>下载 nodejs 安装包，这里是通过 <a href="http://nodejs.cn/download/current/">node.js 中文网</a> 下载 LST 版 v14.17.1，并通过 <a href="https://mobaxterm.mobatek.net/">Mobaxterm</a> 将文件上传到服务器。</p><p>解压软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">xz -d node-v14.17.1-linux-x64.tar.xz<br>tar -xvf node-v14.17.1-linux-x64.tar<br></code></pre></td></tr></table></figure><p>测试是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /root/node-v14.17.1-linux-x64/bin<br>./node -v<br><span class="hljs-comment"># v14.17.1</span><br></code></pre></td></tr></table></figure><p>移动到 <code>/usr/local/src</code> 目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mv node-v14.17.1-linux-x64 /usr/<span class="hljs-built_in">local</span>/src/<br></code></pre></td></tr></table></figure><p>做软链接命令全局可用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ln -s /usr/<span class="hljs-built_in">local</span>/src/node-v14.17.1-linux-x64/bin/node /usr/bin/node<br>ln -s /usr/<span class="hljs-built_in">local</span>/src/node-v14.17.1-linux-x64/bin/npm /usr/bin/npm<br>ln -s /usr/<span class="hljs-built_in">local</span>/src/node-v14.17.1-linux-x64/bin/npx /usr/bin/npx<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br></code></pre></td></tr></table></figure><h2 id="安装-cnpm"><a href="#安装-cnpm" class="headerlink" title="安装 cnpm"></a>安装 cnpm</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npm.taobao.org<br>ln -s /usr/<span class="hljs-built_in">local</span>/src/node-v14.17.1-linux-x64/lib/node_modules/cnpm/bin/cnpm /usr/bin/cnpm<br></code></pre></td></tr></table></figure><h2 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h2><p>查看是否安装 docker </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -aq | grep docker<br></code></pre></td></tr></table></figure><p>卸载旧的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum remove docker docker-client docker-client-latest docker-common docker-latest  docker-latest-logrotate docker-logrotate docker-engine<br></code></pre></td></tr></table></figure><p>需要的安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install -y yum-utils<br></code></pre></td></tr></table></figure><p>设置镜像的仓库，下载默认是国外的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p>推荐使用阿里云镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p>更新 yum 软件包索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum makecache fast<br></code></pre></td></tr></table></figure><p>安装 docker 相关</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p>启动 docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start docker<br></code></pre></td></tr></table></figure><p>查看是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker version<br></code></pre></td></tr></table></figure><p>配置镜像加速器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://rel45hae.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="安装-GIt"><a href="#安装-GIt" class="headerlink" title="安装 GIt"></a>安装 GIt</h2><p>安装 git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y git<br></code></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version<br></code></pre></td></tr></table></figure><p>解决 阿里云服务器 git clone 慢的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/ssh/ssh_config<br></code></pre></td></tr></table></figure><p><code>GSSAPIAuthentication yes</code> 改为 no</p><h2 id="部署-RSSHub"><a href="#部署-RSSHub" class="headerlink" title="部署 RSSHub"></a>部署 RSSHub</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/DIYgod/RSSHub.git<br><span class="hljs-built_in">cd</span> RSSHub<br></code></pre></td></tr></table></figure><p>安装 pm2 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g pm2<br>ln -s /usr/<span class="hljs-built_in">local</span>/src/node-v14.17.1-linux-x64/bin/pm2 /usr/<span class="hljs-built_in">local</span>/bin/pm2<br></code></pre></td></tr></table></figure><p>启动 rsshub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"> cnpm ci --production<br><span class="hljs-comment"># pm2 start lib/index.js --name rsshub</span><br><span class="hljs-comment"># 后台方式启动</span><br><span class="hljs-comment"># which nohup</span><br><span class="hljs-comment"># .bash_profile中并source加载</span><br><br><span class="hljs-comment"># 如果没有就安装</span><br><span class="hljs-comment"># yum provides */nohup</span><br>nohup npm start &amp;<br></code></pre></td></tr></table></figure><p>开放阿里云 1200 端口，开放服务器端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看所有监听端口</span><br>netstat -lntp<br><span class="hljs-comment"># 开启防火墙服务</span><br>systemctl start firewalld.service<br><span class="hljs-comment"># 开放 8080 端口 80 443 22 1200</span><br>firewall-cmd --zone=public --add-port=8080/tcp --permanent<br>firewall-cmd --zone=public --add-port=1200/tcp --permanent   <span class="hljs-comment"># 开放5672端口</span><br>firewall-cmd --zone=public --remove-port=1200/tcp --permanent  <span class="hljs-comment">#关闭5672端口</span><br><span class="hljs-comment"># 查看开放端口</span><br>firewall-cmd --zone=public --list-ports<br>firewall-cmd --reload   <span class="hljs-comment"># 配置立即生效</span><br></code></pre></td></tr></table></figure><h3 id="部署-TTRSS"><a href="#部署-TTRSS" class="headerlink" title="部署 TTRSS"></a>部署 TTRSS</h3><p>下载 <a href="https://github.com/HenryQW/Awesome-TTRSS/blob/main/docker-compose.yml">docker-compose.yml</a> 到任意目录（推荐本地修改后上传，远程登录软件里面修改有 bug）</p><p><img src="https://gitee.com/rdleng0/typora-img/raw/master//img/20210702163055.png" alt="image-20210702163053360"></p><p>部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><p>登录上面配置的连接，默认用户名：admin 密码：password。首先修改密码。</p><p>开启全文抓取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run -p 3000:3000 -d --restart=always wangqiru/mercury-parser-api<br></code></pre></td></tr></table></figure><h2 id="部署-FreshRSS"><a href="#部署-FreshRSS" class="headerlink" title="部署 FreshRSS"></a>部署 FreshRSS</h2><p>创建隔离网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network create freshrss-network<br></code></pre></td></tr></table></figure><p>运行 FreshRSS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker volume create freshrss-data<br>docker volume create freshrss-extensions<br><br><span class="hljs-comment"># Remember to replace freshrss.example.net by your server address in the command below:</span><br>docker run -d --restart unless-stopped --log-opt max-size=10m -v freshrss-data:/var/www/FreshRSS/data -v freshrss-extensions:/var/www/FreshRSS/extensions -e <span class="hljs-string">&#x27;CRON_MIN=4,34&#x27;</span> -e TZ=Asia/Shanghai --net freshrss-network -p 12003:80  --name freshrss<br><br><span class="hljs-comment">#freshrss/freshrss</span><br>  <br> <span class="hljs-comment"># --label traefik.port=80 \</span><br> <span class="hljs-comment"># --label traefik.frontend.rule=&#x27;Host:freshrss.example.net&#x27; \</span><br> <span class="hljs-comment"># --label traefik.frontend.headers.forceSTSHeader=true \</span><br> <span class="hljs-comment"># --label traefik.frontend.headers.STSSeconds=31536000 \</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>公约数算法</title>
    <link href="/2021/07/02/%E7%AE%97%E6%B3%95/"/>
    <url>/2021/07/02/%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>描述：求两数 m n 的最大公约数和最小公倍数之和。<br>输入：正整数 m，n（1 ≤  m ≤ 10^9，1 ≤ n ≤ 10^9）<br>输出：m + n</p><p>欧几里得最大公约数算法，a 和 b 的公约数等于 b 和 a 与 b 的余数的最大公约数，递归调用 int gcd(int,int) 方法。注意递归终止条件为 <code>b==0</code>。此算法时间复杂度为 **log(N)**。<br>最小公倍数是两数乘积除以最小公约数。考虑到乘法溢出问题数据类型使用 long 型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">while</span>(sc.hasNext())&#123;<br>            <span class="hljs-keyword">long</span> m = sc.nextInt();<br>            <span class="hljs-keyword">long</span> n = sc.nextInt();<br>            <span class="hljs-keyword">long</span> j = gcd(m,n);<br>            <span class="hljs-keyword">long</span> k = m * n / j;<br>            System.out.println(j+k);<br>        &#125;<br>    &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">long</span> a,<span class="hljs-keyword">long</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> a;<br>         <span class="hljs-keyword">long</span> r = a % b;<br>        <span class="hljs-keyword">return</span> gcd(b,r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>辗转相减法：两数相减直到相等，得到的结果即两数的最小公约数。时间复杂度为 **log(N)**。</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建 Gitee 博客</title>
    <link href="/2021/07/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/07/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建-Gitee-博客"><a href="#搭建-Gitee-博客" class="headerlink" title="搭建 Gitee 博客"></a>搭建 Gitee 博客</h1><p>安装 Git</p><p>安装 nodejs</p><p>进入 <a href="http://nodejs.cn/download/">node.js 中文网</a> 下载 nodejs，下载 LTS 版本。<a href="https://nodejs.org/zh-cn/download/">官网</a> 下载太慢。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 检查 node 是否安装成功，node 版本要高于 v12.0 否则 hexo 报错</span><br>node -v<br>npm -v<br></code></pre></td></tr></table></figure><p>配置环境变量</p><ol><li><p>安装目录新建 <code>node_global</code> 以及 <code>node_cache</code> 两个文件夹</p></li><li><p>在安装路径下打开 cmd，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;E:\softerwares\nodjs\node_global&quot;</span><br>npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;E:\softerwares\nodjs\node_cache&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>高级系统设置，系统变量新建 <code>NODE_PATH</code>，输入 <code>E:\softerwares\nodjs\node_global\node_modules</code>；用户变量下的 <code>Path</code> 添加 <code>E:\softerwares\node_global</code></p></li></ol><p>安装淘宝 cnpm 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># c:/USers/rdleng 目录下</span><br>npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p> 检查是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm -v<br></code></pre></td></tr></table></figure><p>博客安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>检查安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure><p>任意文件夹新建目录，如 <code>e://rdleng_blog</code>，进入文件夹，右键 <code>git bash here</code>；</p><p>博客初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure><p>运行博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><p>验证：浏览器输入 <a href="http://localhost:4000/">http://localhost:4000</a> 。</p><p>hexo 常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;文章标题&quot;</span><br></code></pre></td></tr></table></figure><p>使用 Typora 编辑文件。</p><p>清除博客缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><p>生成静态页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><p>码云新建私有仓库，名称为 rdleng_blog</p><p>安装 git 插件，博客根路径下输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install --save hexo-deployer-git<br></code></pre></td></tr></table></figure><p>设置远程仓库</p><p>打开 <code>._config.yml</code></p><p>修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">url:</span> <span class="hljs-string">http://gitee.com/rdleng0</span><br><span class="hljs-string">root:/rdleng_blog/</span><br></code></pre></td></tr></table></figure><p>设置仓库地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://gitee.com/rdleng0/rdleng_blog</span>   <br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>部署到远端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><p>如果报错</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">remote:</span> Access denied<br><span class="hljs-symbol">fatal:</span> unable <span class="hljs-keyword">to</span> access <span class="hljs-comment">&#x27;https://gitee.com/rdleng0/rdleng_blog/&#x27;: The requested URL returned error: 403</span><br></code></pre></td></tr></table></figure><p>清空本地账号的缓存，win+r -&gt; control -&gt; 用户账户 -&gt; 凭证管理器</p><p>码云开启静态页面服务</p><p><img src="https://gitee.com/rdleng0/typora-img/raw/master//img/20210701081954.png" alt="image-20210701081951758"></p><p>直接启动即可。</p><p>每次 <code>hexo d</code> 之后要更新。</p><p>博客流程</p><ol><li><p>写博客</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;文章名&quot;</span> 使用 Typora 编辑文件<br></code></pre></td></tr></table></figure></li><li><p>清缓存 &amp; 更新渲染</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">hexo <span class="hljs-built_in">clean</span> 清缓存<br>hexo g 重新渲染<br></code></pre></td></tr></table></figure></li><li><p>推送到码云</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure></li><li><p>更新码云的静态页面</p></li></ol><p><a href="https://blog.csdn.net/qq_46036214/article/details/110137239">在 gitee 搭建属于自己的博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/07/01/hello-world/"/>
    <url>/2021/07/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
